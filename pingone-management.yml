openapi: 3.0.0
info:
  title: PingOne Platform API - SSO and Base
  description: The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
  version: 1.0.0
externalDocs:
  url: https://apidocs.pingidentity.com/pingone/platform/v1/api/#management-apis
  description: PingOne Platform API Reference - Management APIs
servers:
  - url: https://api.pingone.{suffix}
    description: PingOne Platform API Endpoint
    variables:
      suffix:
        enum:
          - 'eu'
          - 'com'
          - 'asia'
          - 'ca'
        default: 'eu'
components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth bearer token (see documentation)
  schemas:
    P1Error:
      type: object
      properties: 
        id:
          type: string
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              target:
                type: string
              message:
                type: string
    EntityArray:
      type: object
      properties:
        '_embedded':
          type: object
          properties:
            attributes:
              type: array
              items:
                oneOf:
                  - $ref:  '#/components/schemas/ApplicationAttributeMapping'
                  - $ref:  '#/components/schemas/SchemaAttribute'
                  - $ref:  '#/components/schemas/ResourceAttribute'
            applications:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/ApplicationSAML'
                  - $ref: '#/components/schemas/ApplicationOIDC'
            credentials:
              type: array
              items:
                $ref: '#/components/schemas/GatewayCredential'
            environments:
              type: array
              items:
                $ref: '#/components/schemas/Environment'
            gatewayInstances:
              type: array
              items:
                $ref: '#/components/schemas/GatewayInstance'
            gateways:
              type: array
              items:
                anyOf:
                  - $ref: '#/components/schemas/Gateway'
                  - $ref: '#/components/schemas/GatewayLDAP'
            grants:
              type: array
              items:
                $ref: '#/components/schemas/ApplicationResourceGrant'
            groups:
              type: array
              items:
                $ref: '#/components/schemas/Group'
            groupMemberships:
              type: array
              items:
                $ref: '#/components/schemas/GroupMembership'
            populations:
              type: array
              items:
                $ref: '#/components/schemas/Population'
            resources:
              type: array
              items:
                $ref: '#/components/schemas/Resource'
            scopes:
              type: array
              items:
                $ref: '#/components/schemas/ResourceScope'
            roleAssignments:
              type: array
              items:
                $ref: '#/components/schemas/RoleAssignment'
            roles:
              type: array
              items:
                $ref: '#/components/schemas/Role'
            schemas:
              type: array
              items:
                $ref: '#/components/schemas/Schema'
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
        count:
          type: number
        size:
          type: number
    ObjectEnvironment:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the environment associated with the object.
    ObjectPopulation:
      type: object
      readOnly: true
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the population associated with the object.
    Application:
      type: object
      properties:
        accessControl:
          type: object
          properties:
            role:
              type: object
              properties:
                type:
                  type: string
                  description: A string that specifies the user role required to access the application. Options are ADMIN_USERS_ONLY. A user is an admin user if the user has one or more of the following roles Organization Admin, Environment Admin, Identity Data Admin, or Client Application Developer.
              required:
                - type
            group:
              type: object
              properties:
                type:
                  type: string
                  description: A string that specifies the group type required to access the application. Options are ANY_GROUP (the actor must belong to at least one group listed in the accessControl.group.groups property) and ALL_GROUPS (the actor must belong to all groups listed in the accessControl.group.groups property).
                groups:
                  type: array
                  description: A set that specifies the group IDs for the groups the actor must belong to for access to the application.
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                    required:
                      - id
              required:
                - type
                - groups
        assignActorRoles:
          type: boolean
          description: A boolean that specifies whether the permissions service should assign default roles to the application. This property is set only on the POST request. The property is ignored when included in a PUT request.
        createdAt:
          type: string
          readOnly: true
          description: The time the resource was created.
        description:
          type: string
          description: A string that specifies the description of the application.
        enabled:
          type: boolean
          description: A string that specifies the current enabled state of the application. Options are ENABLED or DISABLED.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        icon:
          type: object
          description: The HREF and the ID for the application icon.
          properties:
            id:
              type: string
            href:
              type: string
          required:
            - id
            - href
        id:
          type: string
          readOnly: true
          description: A string that specifies the application ID.
        loginPageUrl:
          type: string
          description: A string that specifies the custom login page URL for the application. If you set the loginPageUrl property for applications in an environment that sets a custom domain, the URL should include the top-level domain and at least one additional domain level. Warning To avoid issues with third-party cookies in some browsers, a custom domain must be used, giving your PingOne environment the same parent domain as your authentication application. For more information about custom domains, see Custom domains.
        name:
          type: string
          description: A string that specifies the name of the application. This is a required property.
        protocol:
          type: string
          enum: [OPENID_CONNECT, SAML]
          description: A string that specifies the protocol for the Application. Options are OPENID_CONNECT and SAML.
        tags:
          type: array
          description: An array that specifies the list of labels associated with the application. Options are PING_FED_CONNECTION_INTEGRATION.
          items:
            type: string
            enum: [PING_FED_CONNECTION_INTEGRATION]
        type:
          type: string
          enum: [WEB_APP, NATIVE_APP, SINGLE_PAGE_APP, WORKER, SERVICE, CUSTOM_APP]
          description: A string that specifies the type associated with the application. This is a required property. Options are WEB_APP, NATIVE_APP, SINGLE_PAGE_APP, and WORKER.
        updatedAt:
          type: string
          readOnly: true
          description: The time the resource was last updated.
        supportUnsignedRequestObject:
          type: boolean
          description: A boolean that specifies whether the request query parameter JWT is allowed to be unsigned. If false or null (default), an unsigned request object is not allowed.
      required:
        - enabled
        - name
        - type
        - protocol
    ApplicationSAML:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            acsUrls:
              type: array
              description: A string that specifies the Assertion Consumer Service URLs. The first URL in the list is used as default (there must be at least one URL). This is a required property.
              items:
                type: string
            assertionDuration:
              type: integer
              description: An integer that specifies the assertion validity duration in seconds. This is a required property.
            assertionSigned:
              type: boolean
              description: A boolean that specifies whether the SAML assertion itself should be signed. The default value is true.
            idpSigningtype:
              type: object
              properties:
                key:
                  type: object
                  properties:
                    id:
                      type: string
                      description: A string that specifies the certificate to be used by the identity provider to sign assertions and responses. If this property is omitted, the default signing certificate for the environment is used.
                  required:
                    - id
              required:
                - key
            nameIdFormat:
              type: string
              description: A string that specifies the format of the Subject NameID attibute in the SAML assertion
            responseSigned:
              type: boolean
              description: A boolean that specifies whether the SAML assertion response itself should be signed. The default value is False.
            sloBinding:
              type: string
              enum: [HTTP_REDIRECT, HTTP_POST]
              description: A string that specifies the binding protocol to be used for the logout response. Options are HTTP_REDIRECT or HTTP_POST. The default is HTTP_POST; existing configurations with no data default to HTTP_POST. This is an optional property.
            sloEndpoint:
              type: string
              description: A string that specifies the logout endpoint URL. This is an optional property. However, if a sloEndpoint logout endpoint URL is not defined, logout actions result in an error.
            sloResponseEndpoint:
              type: string
              description: A string that specifies the endpoint URL to submit the logout response. If a value is not provided, the sloEndpoint property value is used to submit SLO response.
            spEntityId:
              type: string
              description: A string that specifies the service provider entity ID used to lookup the application. This is a required property and is unique within the environment.
            spVerification:
              type: object
              properties:
                certificates:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: An array that specifies the certificate IDs used to verify the service provider signature.
              required:
                - certificates
          required:
            - spEntityId
            - acsUrls
            - assertionDuration
    ApplicationOIDC:
      allOf:
        - $ref: '#/components/schemas/Application'
        - type: object
          properties:
            mobile:
              type: object
              properties:
                bundleId:
                  type: string
                  description: A string that specifies the bundle associated with the application, for push notifications in native apps. The value of the bundleId property is unique per environment, and once defined, is immutable.  this setting overrides the top-level bundleId field
                packageName:
                  type: string
                  description: A string that specifies the package name associated with the application, for push notifications in native apps. The value of the mobile.packageName property is unique per environment, and once defined, is immutable.  this setting overrides the top-level packageName field.
                integrityDetection:
                  type: object
                  properties:
                    mode:
                      type: string
                      enum: [ENABLED, DISABLED]
                      description: A string that specifies whether device integrity detection takes place on mobile devices, for the application's enrollment and authentication events ENABLED, DISABLED
                    cacheDuration:
                      type: object
                      properties:
                        amount:
                          type: integer
                          description: An integer that specifies the number of minutes or hours that specify the duration between successful integrity detection calls. Every attestation request entails a certain time tradeoff. You can choose to cache successful integrity detection calls for a predefined duration, between a minimum of 1 minute and a maximum of 48 hours. If mobile.integrityDetection.mode is ENABLED, the cache duration must be set.
                        units:
                          type: string
                          enum: [MINUTES, HOURS]
                          description: A string that specifies the time units of the mobile.integrityDetection.cacheDuration.amount :MINUTES, HOURS
            bundleId:
              type: string
              description: A string that specifies the bundle associated with the application, for push notifications in native apps. The value of the bundleId property is unique per environment, and once defined, is immutable.
            packageName:
              type: string
              description: A string that specifies the package name associated with the application, for push notifications in native apps. The value of the mobile.packageName property is unique per environment, and once defined, is immutable.
            grantTypes:
              type: array
              description: A string that specifies the grant type for the authorization request. This is a required property. Options are AUTHORIZATION_CODE, IMPLICIT, REFRESH_TOKEN, CLIENT_CREDENTIALS.
              items:
                type: string
                enum: [AUTHORIZATION_CODE, IMPLICIT, REFRESH_TOKEN, CLIENT_CREDENTIALS]
            homePageUrl:
              type: string
              description: A string that specifies the custom home page URL for the application.
            pkceEnforcement:
              type: string
              enum: [OPTIONAL, REQUIRED, S256_REQUIRED]
              description: A string that specifies how PKCE request parameters are handled on the authorize request. Options are OPTIONAL PKCE code_challenge is optional and any code challenge method is acceptable. REQUIRED PKCE code_challenge is required and any code challenge method is acceptable. S256_REQUIRED PKCE code_challege is required and the code_challenge_method must be S256.
            postLogoutRedirectUris:
              type: array
              description: A string that specifies the URLs that the browser can be redirected to after logout.
              items:
                type: string
            redirectUris:
              type: array
              description: A string that specifies the callback URI for the authentication response.
              items:
                type: string
            refreshTokenDuration:
              type: integer
              description: An integer that specifies the lifetime in seconds of the refresh token. If a value is not provided, the default value is 2592000, or 30 days. Valid values are between 60 and 2147483647. If the refreshTokenRollingDuration property is specified for the application, then this property must be less than or equal to the value of refreshTokenRollingDuration. After this property is set, the value cannot be nullified. This value is used to generate the value for the exp claim when minting a new refresh token.
            refreshTokenRollingDuration:
              type: integer
              description: An integer that specifies the number of seconds a refresh token can be exchanged before re-authentication is required. If a value is not provided, the refresh token is valid forever. Valid values are between 60 and 2147483647. After this property is set, the value cannot be nullified. This value is used to generate the value for the exp claim when minting a new refresh token.
            responseTypes:
              type: array
              description: A string that specifies the code or token type returned by an authorization request. Options are TOKEN, ID_TOKEN, and CODE. Note that CODE cannot be used in an authorization request with TOKEN or ID_TOKEN because PingOne does not currently support OIDC hybrid flows.
              items:
                type: string
                enum: [TOKEN, ID_TOKEN, CODE]
            tokenEndpointAuthMethod:
              type: string
              enum: [NONE, CLIENT_SECRET_BASIC, CLIENT_SECRET_POST]
              description: A string that specifies the client authentication methods supported by the token endpoint. This is a required property. Options are NONE, CLIENT_SECRET_BASIC, and CLIENT_SECRET_POST.  
          required:
            - grantTypes
            - tokenEndpointAuthMethod
    ApplicationAttributeMapping:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the application ID.
        createdAt:
          type: string
          readOnly: true
          description: The time the resource was created.
        mappingType:
          type: string
          enum: [CORE, SCOPE, CUSTOM]
          description: A string that specifies the mapping type of the attribute. Options are CORE, SCOPE, and CUSTOM. The CORE and SCOPE mapping types are for reserved attributes managed by the API and cannot be removed. Attribute values for these mapping types can be updated. The CUSTOM mapping type is for user-defined attributes. Attributes of this type can be updated and deleted.
        name:
          type: string
          description: A string that specifies the name of attribute and must be unique within an application. For SAML applications, the samlAssertion.subject name is a reserved case-insensitive name which indicates the mapping to be used for the subject in an assertion. For OpenID Connect applications, the following names are reserved and cannot be used acr, amr, at_hash, aud, auth_time, azp, client_id, exp, iat, iss, jti, nbf, nonce, org, scope, sid, sub  This is a required property.
        required:
          type: boolean
          description: A boolean to specify whether a mapping value is required for this attribute. If true, a value must be set and a non-empty value must be available in the SAML assertion or ID token.
        updatedAt:
          type: string
          readOnly: true
          description: The time the resource was updated.
        value:
          type: string
          description: A string that specifies the string constants or expression for mapping the attribute path against a specific source. The expression format is ${<source>.<attribute_path>}. The only supported source is user (for example, ${user.id}). This is a required property.
      required:
        - name
        - value
        - required
    ApplicationResourceGrant:
      type: object
      properties:
        application:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              readOnly: true
              description: A string that specifies the application resource ID.
        createdAt:
          type: string
          readOnly: true
          description: The time the resource was created.
        id:
          type: string
          readOnly: true
          description: A string that specifies the application resource grant ID.
        resource:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the ID of the protected resource associated with this grant. This is a required property.
          required:
            - id
        scopes:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: id	A array that specifies the IDs of the scopes associated with this grant. This is a required property.
            required:
              - id
        updatedAt:
          type: string
          readOnly: true
          description: The time the resource was last updated.
      required:
        - resource
        - scopes
    ApplicationSecret:
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        secret:
          type: string
          readOnly: true
          description: A string that specifies the application secret ID used to authenticate to the authorization server.
    BillOfMaterials:
      type: object
      properties:
        solutionType:
          type: string
          enum: [WORKFORCE, CUSTOMER]
          description: The solution set of the bill of materials
        createdAt:
          type: string
          description: The time the resource was created.
          readOnly: true
        updatedAt:
          type: string
          description: The time the resource was last updated.
          readOnly: true
        products:
          type: array
          description: An array that specifies the products associated with this bill of materials
          items:
            type: object
            properties:
              id:
                type: string
                readOnly: true
                description: A string that specifies the BOM ID
              type:
                type: string
                enum: [PING_ONE_MFA, PING_ONE_ORCHESTRATE, PING_ONE_RISK, PING_ONE_VERIFY, PING_ONE_CREDENTIALS, PING_ONE_AUTHORIZE, PING_ONE_BASE, PING_FEDERATE, PING_ACCESS, PING_DIRECTORY, PING_AUTHORIZE, PING_ID, PING_INTELLIGENCE, PING_CENTRAL]
                description: A string that specifies the Ping Identity product type. Options for PingOne platform products are PING_ONE_ORCHESTRATE, PING_ONE_MFA, PING_ONE_RISK, PING_ONE_VERIFY, PING_ONE_CREDENTIALS, PING_ONE_AUTHORIZE and PING_ONE_BASE. The PING_ONE_BASE product represents the default set of services that an environment can use on the PingOne platform. Options for other Ping Identity products are PING_FEDERATE, PING_ACCESS, PING_DIRECTORY, PING_AUTHORIZE, PING_ID, PING_INTELLIGENCE, and PING_CENTRAL
              description:
                type: string
                description: A string that specifies the description of the product or standalone service
                readOnly: true
              console:
                type: object
                properties:
                  href:
                    type: string
                    description: Primary console link for certain products
                required:
                  - href
              deployment:
                type: object
                properties:
                  id:
                    type: string
                    description: The ID of the PingID deployment
                    readOnly: true
              bookmarks:
                type: array
                description: Optional array of custom bookmarks. Maximum of five bookmarks per product.
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: Name of the custom bookmark. The name must be unique among the product bookmarks and be 50 characters or fewer.
                    href:
                      type: string
                      description: A valid URL for the bookmark.
                  required:
                    - name
                    - href
            required:
              - type
      required:
        - products
    Environment:
      type: object
      properties:
        billOfMaterials:
          $ref: '#/components/schemas/BillOfMaterials'
        createdAt:
          type: string
          description: The time the resource was created.
          readOnly: true
        description:
          type: string
          description: A string that specifies the description of the population.
        id:
          type: string
          description: A string that specifies the resource’s unique identifier.
          readOnly: true
        license:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the active license associated with this environment. This property is required only if your organization has more than one active license.
          required:
            - id
        name:
          type: string
          description: A string that specifies the environment name, which must be provided and must be unique within an organization.
        organization:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the organization resource’s unique identifier associated with the environment.
        region:
          type: string
          enum: [NA, EU, AP]
          description: A string that specifies the region in which this environment will be used. The value is set when the environment is created and cannot be updated. Options are NA, EU, and AP.
        type:
          type: string
          enum: [PRODUCTION, SANDBOX]
          description: A string that specifies the type of environment to use. Options are PRODUCTION and SANDBOX.
        updatedAt:
          type: string
          description: The time the resource was last updated.
          readOnly: true
      required:
        - name
        - type
        - region
        - license
      example:
        name: New-Env
        description: New environment description
        type: SANDBOX
        region: EU
        billOfMaterials:
          products:
            type: PING_ONE_BASE
            description: New environment product description
            console:
              href: https://example.com
        license:
          id: 34f0efac-21d9-4a17-8a35-196bb3362983
    Gateway:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the instance ID of the gateway. The gateway instance ID is created by the gateway when it starts up.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        credentials:
          type: array
          items:
            $ref: '#/components/schemas/GatewayCredential'
        name:
          type: string
          description: A string that specifies the resource name, which must be provided and must be unique within an environment. Valid characters are any Unicode letter, mark, numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen.
        description:
          type: string
          description: (Optional) A string that specifies the description of the resource.
        type:
          type: string
          enum: [LDAP, PING_FEDERATE, PING_INTELLIGENCE]
          description: A string that specifies the type of gateway resource. Options are LDAP, PING_FEDERATE and PING_INTELLIGENCE. This is a required property.
        enabled:
          type: boolean
          description: A boolean that specifies whether the gateway is enabled. This is a required property.
        supportedVersions:
          type: object
          description: An array that lists the LDAP gateway versions associated with this gateway resource. This information is returned on a GET {{apiPath}}/environments/{{environmentID}}/gateways request, and it is used to trigger alerts if the gateway tries to connect with an unsupported version (or a version that is not the latest or recommended version).
          properties:
             version:
              type: string
              description: A string that specifies the gateway version number.
             image:
              type: string
              description: A string that identifies the gateway image path.
             recommended:
              type: boolean
              description: A boolean that specifies whether this is the recommended LDAP gateway version.
             latest:
              type: boolean
              description: A boolean that specifies whether this is the latest LDAP gateway version.
      required:
        - name
        - type
        - enabled
    GatewayLDAP:
      allOf:
        - $ref: '#/components/schemas/Gateway'
        - type: object
          properties:
            bindDN:
              type: string
              description: A string that specifies the distinguished name information to bind to the LDAP database (for example, uid=pingone,dc=example,dc=com).
            bindPassword:
              type: string
              description: A string that specifies the bind password for the LDAP database. This is a required property.
            connectionSecurity:
              type: string
              enum: [None, TLS, StartTLS]
              description: (Optional) A string that specifies the connection security type. Options are None, TLS, and StartTLS. The default value is None.
            serversHostAndPort:
              type: array
              items:
                type: string
              description: An array of strings that specifies the LDAP server host name and port number (for example, ["ds1.example.com:389", "ds2.example.com:389"]).
            userTypes:
              type: array
              description: (Optional) An array of the userTypes properties for the users to be provisioned in PingOne. userTypes specifies which user properties in PingOne correspond to the user properties in an external LDAP directory. You can use an LDAP browser to view the user properties in the external LDAP directory.
              items:
                type: object
                properties:
                  allowPasswordChanges:
                    type: boolean
                    description: (Optional) Defaults to false if this property isn't specified in the request. If false, the user cannot change the password in the remote LDAP directory. In this case, operations for forgotten passwords or resetting of passwords are not available to a user referencing this gateway.
                  id:
                    type: string
                    description: (Optional) The UUID of the user type. This correlates to the password.external.gateway.userType.id User property.
                  newUserLookup:
                    type: object
                    description: (Optional) The configurations for initially authenticating new users who will be migrated to PingOne. Note If there are multiple users having the same user name, only the first user processed is provisioned.
                    properties:
                      attributeMappings:
                        type: array
                        description: A list of objects supplying a mapping of PingOne attributes to external LDAP attributes. One of the entries must be a mapping for "username”. This is required for the PingOne user schema.
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              description: The PingOne username attribute. See Users properties for the complete list of PingOne user attributes.
                            value:
                              type: string
                              description: A placeholder reference to the corresponding external LDAP attribute for name.
                          required:
                            - name
                            - value
                      ldapFilterPattern:
                        type: string
                        description: (Optional) The LDAP user search filter to use to match users against the entered user identifier at login. For example, (((uid=${identifier})(mail=${identifier})). Alternatively, this can be a search against the user directory.
                      population:
                        type: object
                        description: (Optional) The PingOne population to use to create user entries during lookup.
                        properties:
                          id:
                            type: string
                            description: (Optional) The ID of the population to use to create user entries during lookup.
                        required:
                          - id
                    required:
                      - attributeMappings
                required:
                  - newUserLookup
            validateTlsCertificates:
              type: boolean
              description: (Optional) A boolean that specifies whether or not to trust all SSL certificates (defaults to true). If this value is false, TLS certificates are not validated. When the value is set to true, only certificates that are signed by the default JVM CAs, or the CA certs that the customer has uploaded to the certificate service are trusted.
            vendor:
              type: string
              description: A string that specifies the LDAP vendor. Options are PingDirectory, Microsoft Active Directory, Oracle Directory Server Enterprise Edition, Oracle Unified Directory, CA Directory, OpenDJ Directory, IBM (Tivoli) Security Directory Server, and LDAP v3 compliant Directory Server.
          required:
            - bindDN
            - bindPassword
            - userTypes
            - vendor
    GatewayCredential:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the auto-generated ID for this credential. This is the JWT's jti claim. This is a required property.
        createdAt:
          type: string
          readOnly: true
          description: A date that specifies the date the credential was created in Coordinated Universal Time (UTC). This is a required property.
        gatewayType:
          type: string
          enum: [LDAP, PING_FEDERATE, PING_INTELLIGENCE]
          readOnly: true
          description: A date that specifies the date the credential was created in Coordinated Universal Time (UTC). This is a required property.
        lastUsedAt:
          type: string
          readOnly: true
          description: A date that specifies the date the credential was last used in UTC. This is a required property.
        consoleUrl:
          type: string
          readOnly: true
        apiUrl:
          type: string
          readOnly: true
        authUrl:
          type: string
          readOnly: true
        credential:
          type: string
          readOnly: true
          description: A string that specifies the signed JWT for the gateway credential. This property is present only when the gateway credential is created.
    GatewayInstance:
      type: object
      properties:
        connected:
          type: boolean
          description: A boolean that specifies whether or not the gateway instance has one or more connections. This is a required property.
        id:
          type: string
          readOnly: true
          description: A string that specifies the instance ID of the gateway. The gateway instance ID is created by the gateway when it starts up.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        gateway:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              description: A string that specifies the gateway ID.
        credential:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              description: A string that specifies the credential ID.
        currentErrors:
          type: array
          description: An array of strings that lists the messages that are maintained by the gateway instance.
          items:
            type: string
        healthStatus:
          type: string
          enum: [HEALTHY, DEGRADED, UNHEALTHY]
          description: An enumeration that specifies whether or not the gateway is in a healthy state. Options are HEALTHY, DEGRADED, UNHEALTHY. This is a required property.
        hostname:
          type: string
          description: A string that specifies the hostname of the container running in the customer’s infrastructure. This is a required property.
        initializedAt:
          type: string
          description: A timestamp that specifies when gateway was initialized (when the first connect to PingOne was made).
        lastReportedAt:
          type: string
          description: A timestamp that specifies the last reported timestamp, heartbeat, or other message.
        version:
          type: object
          description: An object containing the version of the gateway running for the instance.
          properties:
            versionNumber:
              type: string
              description: A string that specifies the version number of the gateway running for the instance. This is a required property.
            updateStatus:
              type: string
              description: >-
                An enumeration that specifies one of the following values:
                AT_LATEST: The gateway instance's version is at or after the supported version marked latest.
                UPGRADE_AVAILABLE: The gateway instance's version is at the supported version that is marked recommended but there is a later supported version marked recommended.
                UPGRADE_RECOMMENDED: The gateway instance's version is at a known version but the version is not marked as recommended or latest. The version has greater than 30 days support.
                UPGRADE_REQUIRED: The gateway instance's version is at a known version but the version is not marked as recommended or latest. The version has support ending within the next month.
                NOT_SUPPORTED: The gateway instance's version is not known or supported.
              enum: [AT_LATEST, UPGRADE_AVAILABLE, UPGRADE_RECOMMENDED, UPGRADE_REQUIRED, NOT_SUPPORTED]
        busyPercentage:
          type: integer
          description: An integer that specifies the gateway instance's busy percentage. When this percentage is high, then more instances should be added.
        operationsPerSecond:
          type: number
          description: A number that specifies the recent throughput of the gateway instance.
        responseTimeMillis:
          type: number
          description: A number that specifies the processing time of the gateway instance in milliseconds.
    Group:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier for the group. Search all groups for a specific group ID with a SCIM filter on GET /environments/{environmentID}/groups. Retrieve all the group IDs associated with a user with GET /environments/{environmentID}/users/{userID}?include=memberOfGroupIDs.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        population:
          type: object
          description: The population to assign the group to
          properties:
            id:
              type: string
              description: The population ID
          required:
            - id
        name:
          type: string
          description: The group name. A group name can be reused across populations, but the same user cannot belong to multiple groups with the same group name. Population groups cannot share a group name with an environment group. Search all groups for a specific group name with a SCIM filter on GET /environments/{environmentID}/groups. Retrieve all the group names associated with a user with GET /environments/{environmentID}/users/{userID}?include=memberOfGroupNames. Use this operation to determine group membership in attribute mappings for claims and assertions.
        userFilter:
          type: string
          description: A SCIM filter that determines which users are dynamically added to the group. For more information, see Adding users to a group and Removing users from a group.
        description:
          type: string
          description: The group description.
        externalId:
          type: string
          description: A user-defined identifier for the group. Use this propertry to syncronize a group in PingOne with the same group in an external system. PingOne does not directly use this property. Search all groups for a specific external ID with a SCIM filter on GET /environments/{environmentID}/groups
        customData:
          type: object
          description: Optional User-defined custom data.
        directMemberCounts:
          type: object
          readOnly: true
          description: An object containing a users (int) property. This property lists the number of users explicitly added to the group with POST /environments/{environmentID}/users/{userID}/memberOfGroups. Since these members were explicitly added to the group, they can be removed from the group with DELETE /environments/{environmentID}/users/{userID}/memberOfGroups/{groupID}.
          properties:
            users:
              type: integer
              description: Number of users with direct membership
        totalMemberCounts:
          type: object
          readOnly: true
          description: An object containing a users (int) property. This property lists the total number of users added to the group. You must use GET /environments/{environmentID}/groups with the include=totalMemberCounts query parameter to retrieve this property. This property is not returned with a list of groups.
          properties:
            users:
              type: integer
              description: Number of users with direct membership
      required:
        - name
    GroupMembership:
      type: object
      properties:
        id:
          type: string
          description: ID of the group to assign
      required:
       - id
    GroupNesting:
      type: object
      properties:
        id:
          type: string
          description: ID of the group to nest
      required:
       - id
    Image:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        targets:
          type: object
          properties:
            href:
              type: string
              readOnly: true
              description: A string that specifies the URL or fully qualified path to the image source file.
            id:
              type: string
              readOnly: true
              description: A string that specifies the UUID of the target image.
            type:
              type: string
              enum: [PNG, JPG, GIF]
              readOnly: true
              description: A string that specifies the type of format used for the image. Options are jpg, png, and gif.
            width:
              type: integer
              readOnly: true
              description: The width of the image (in pixels).
            height:
              type: integer
              readOnly: true
              description: The height of the image (in pixels).
    Population:
      type: object
      properties:
        createdAt:
          type: string
          description: The time the resource was created.
          readOnly: true
        description:
          type: string
          description: A string that specifies the description of the population.
        id:
          type: string
          description: A string that specifies the resource’s unique identifier.
          readOnly: true
        name:
          type: string
          description: A string that specifies the population name, which must be provided and must be unique within an environment.
        passwordPolicy:
          type: object
          description: The object reference to the password policy resource. This is an optional property.
          properties:
            id:
              type: string
              description: The ID of the password policy that is used for this population. If absent, the environment's default is used. Requried if `passwordPolicy` is used.
          required:
            - id
        updatedAt:
          type: string
          description: The time the resource was last updated.
          readOnly: true
        userCount:
          type: integer
          description: The number of users that belong to the population
          readOnly: true
      required:
        - name
    Resource:
      type: object
      properties:
        accessTokenValiditySeconds:
          type: integer
          description: An integer that specifies the number of seconds that the access token is valid. If a value is not specified, the default is 3600. The minimum value is 300 seconds (5 minutes); the maximum value is 2592000 seconds (30 days).
        audience:
          type: string
          description: A string that specifies a URL without a fragment or "@ObjectName" and must not contain "pingone" or "pingidentity" (for example, https://api.myresource.com). If a URL is not specified, the resource name is used.
        createdAt:
          type: string
          readOnly: true
          description: The time the resource was created.
        description:
          type: string
          description: A string that specifies the description of the resource.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        resource:
          type: object
          readOnly: true
          properties:
            id:
              type: string
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        name:
          type: string
          description: A string that specifies the resource name, which must be provided and must be unique within an environment.
        type:
          type: string
          enum: [OPENID_CONNECT, PING_ONE_API, CUSTOM]
          description: A string that specifies the type of resource. Options are OPENID_CONNECT, PING_ONE_API, and CUSTOM. Only the CUSTOM resource type can be created. OPENID_CONNECT specifies the built-in platform resource for OpenID Connect. PING_ONE_API specifies the built-in platform resource for PingOne.
        updatedAt:
          type: string
          readOnly: true
          description: The time the resource was last updated.
      required:
        - name
    ResourceAttribute:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        name:
          type: string
          description: A string that specifies the name of the custom resource attribute to be included in the access token
        type:
          type: string
          enum: [CORE, CUSTOM]
          description: A string that specifies the type of resource attribute. Options are CORE - The claim is required and cannot not be removed., CUSTOM - The claim is not a CORE attribute. All created attributes are of this type.
        value:
          type: string
          description: A string that specifies the value of the custom resource attribute. This value can be a placeholder that references an attribute in the user schema, expressed as “${user.path.to.value}”, or it can be a static string. Placeholders must be valid, enabled attributes in the environment’s user schema. Examples fo valid values are “${user.email}”, “${user.name.family}”, and “myClaimValueString”
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        resource:
          type: object
          readOnly: true
          properties:
            id:
              type: string
      required:
        - name
        - value
    ResourceScope:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        name:
          type: string
          description: A string that specifies the resource scope name.
        description:
          type: string
          description: A string that specifies the description of the scope.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        schemaAttributes:
          type: array
          description: An array that specifies the user schema attributes that can be read or updated for the specified PingOne access control scope. The value is an array of schema attribute paths (such as username, name.given, shirtSize) that the scope controls. This property is supported only for the p1:read:user, p1:update:user and p1:read:user:{suffix} and p1:update:user:{suffix} scopes. No other PingOne platform scopes allow this behavior. Any attributes not listed in the attribute array are excluded from the read or update action. The wildcard path (*) in the array includes all attributes and cannot be used in conjunction with any other user schema attribute paths
          items:
            type: string
        createdAt:
          type: string
          readOnly: true
          description: The time the resource was created.
        updatedAt:
          type: string
          readOnly: true
          description: The time the resource was last updated.
      required:
        - name
    Role:
      type: object
      properties:
        applicableTo:
          type: array
          readOnly: true
          description: A string that specifies the scope to which the role applies.
          items:
            type: string  
        description:
          type: string
          readOnly: true
          description: A string that specifies the description of the role.
        id:
          type: string
          readOnly: true
          description: A string that specifies the ID of the role.
        name:
          type: string
          description: The name of the role
        permissions:
          type: array
          readOnly: true
          description: A string that specifies the set of permissions assigned to the role.
          items:
            type: object
            properties:
              classifier:
                type: string
                readOnly: true
                description: A string that specifies the resource for which the permission is applicable.
              description:
                type: string
                readOnly: true
                description: A string that specifies the description of what the permission enables for the role.
    RoleAssignment:
      type: object
      properties:
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        gateway:
          type: object
          readOnly: true
          properties:
            id:
              type: string
              description: A string that specifies the gateway ID.
        id:
          type: string
          readOnly: true
          description: A string that specifies the user role assignment ID.
        readOnly:
          type: boolean
          readOnly: true
          description: A boolean that specifies whether this role assignment can be deleted by the current actor.
        role:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the role ID.
          required:
            - id
        scope:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the role assignment scope ID.
            type:
              type: string
              enum: [ORGANIZATION, ENVIRONMENT, POPULATION]
              description: A string that specifies the type of resource defining the scope of the Role assignment. Options are ORGANIZATION, ENVIRONMENT, and POPULATION.
          required:
            - id
            - type
      required:
        - role
        - scope
    Schema:
      type: object
      properties:
        attributes:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/SchemaAttribute'
        description:
          type: string
          readOnly: true
          description: A string that specifies the description of the schema.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        name:
          type: string
          readOnly: true
          description: A string that specifies the resource name.
    SchemaAttribute:
      type: object
      properties:
        description:
          type: string
          description: A string that specifies an optional property that specifies the description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
        displayName:
          type: string
          description: A string that specifies an optional property that specifies the display name of the attribute such as 'T-shirt size’. If provided, it must not be an empty string. Valid characters consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen.
        enabled:
          type: boolean
          description: A boolean that specifies whether or not the attribute is enabled. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null. Disabled attributes are ignored on create/update and not returned on read.
        environment:
          $ref: '#/components/schemas/ObjectEnvironment'
        id:
          type: string
          readOnly: true
          description: A string that specifies the resource’s unique identifier.
        ldapAttribute:
          type: string
          readOnly: true
          description: A string that specifies the LDAP attribute.
        name:
          type: string
          description: A string that specifies the name of the attribute. The attribute name must be provided during creation, must not be empty and must not exceed 256 characters. It must also be unique within the schema for an environment. It must start with a letter and may be followed by letters, numbers or hyphens.
        required:
          type: boolean
          description: A boolean that specifies whether or not the attribute is required. Required attributes must be provided a value during create/update. Defaults to false if not provided.
        schema:
          type: object
          properties:
            id:
              type: string
              readOnly: true
              description: A string that specifies the identifier of the resource referenced by this relationship.
        schemaType:
          type: string
          enum: [ CORE, STANDARD, CUSTOM ]
          description: A string that specifies the schema type of the attribute. It may be one of CORE, STANDARD or CUSTOM. Core and standard attributes are present out-of-the-box. Core attributes may not be updated or deleted. Standard attributes may not be deleted, but their mutable properties may be updated. Custom attributes may be deleted, and their mutable properties may be updated. New attributes are created with a schema type of CUSTOM.
        type:
          type: string
          enum: [ STRING, JSON, BOOLEAN, COMPLEX ]
          description: A string that specifies the the type of the attribute. It may be one of STRING, JSON, BOOLEAN, or COMPLEX. If the type is not provided during creation, then it defaults to STRING. Complex and boolean attributes may not be created, but standard attributes of those types may be updated. JSON attributes are limited by size (total size must not exceed 16KB).
        unique:
          type: boolean
          description: A boolean that specifies whether or not the attribute must have a unique value within the environment. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null.
        multiValued:
          type: boolean
          description: A boolean that specifies whether the attribute has multiple values or a single one. This value can only change from false to true, as changing from true to false is not allowed. Maximum number of values stored is 1,000.
      required:
        - name
        - enabled
        - type
    User:
      type: object
      properties:
        account:
          type: object
          properties:
            canAuthenticate:
              type: boolean
              description: A boolean that specifies the whether the user can authenticate. If the value is set to false, the account is locked or the user is disabled, and unless specified otherwise in administrative configuration, the user will be unable to authenticate.
            lockedAt:
              type: string
              description: The time the specified user account was locked. This property might be absent if the account is unlocked or if the account was locked out automatically by failed password attempts.
            secondsUntilUnlock:
              type: integer
              description: An integer that specifies the number of seconds until the user's account is unlocked. This property is absent if the account is unlocked, or if it will not automatically unlock (and must be unlocked by an administrator).
            status:
              type: string
              description: A string that specifies the account locked state. Options are LOCKED and OK.
            unlockAt:
              type: string
              description: The time the specified user account will be unlocked. This property is absent if the account is unlocked, or if it will not automatically unlock (and must be unlocked by an administrator).
        address:
          type: object
          properties:
            countryCode:
              type: string
              description: A string that specifies the country name component. When specified, the value must be in ISO 3166-1 “alpha-2” code format [ISO3166]. For example, the country codes for the United States and Sweden are “US” and "SE", respectively. Valid characters consist of two upper-case letters (regex [A-Z]{2}).
            locality:
              type: string
              description: A string that specifies the city or locality component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
            postalCode:
              type: string
              description: A string that specifies the zip code or postal code component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 40 characters (min/max=1/40).
            region:
              type: string
              description: A string that specifies the state or region component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
            streetAddress:
              type: string
              description: A string that specifies the full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information. This attribute may contain newlines (regex ^[\p{L}\p{M}\p{N}\p{Zs}\p{P}\n\r]*$). It can have a length of no more than 256 characters (min/max=1/256).
        createdAt:
              type: string
              description: The time the resource was created.
        email:
              type: string
              description: A string that specifies the user’s email address, which must be provided and valid. For more information about email address formatting, see section 3.4 of RFC 2822, Internet Message Format.
        enabled:
              type: boolean
              readOnly: true
              description: A read-only boolean attribute that specifies whether the user is enabled. This attribute is set to ‘true’ by default when the user is created.
        environment:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the environment resource’s unique identifier associated with the user.
        externalId:
          type: string
          description: A string that specifies an identifier for the user resource as defined by the provisioning client. This is optional. This may be explicitly set to null when updating a user to unset it. The externalId attribute simplifies the correlation of the user in PingOne with the user’s account in another system of record. The platform does not use this attribute directly in any way, but it is used by Ping Identity’s Data Sync product. It can have a length of no more than 1024 characters (min/max=1/1024).
        id:
          type: string
          description: A string that specifies the user resource’s unique identifier.
        identityProvider:
          type: object
          properties:
            id:
              type: string
              description: A mutable string that identifies the external identity provider used to authenticate the user. If not provided, PingOne is the identity provider. This attribute is required if the identity provider is authoritative for just-in-time user provisioning.
            type:
              type: string
              readOnly: true
              description: A read-only string that identifies the type of identity provider used to authenticate the user. Possible values are FACEBOOK, GOOGLE, LINKEDIN, APPLE, TWITTER, AMAZON, YAHOO, MICROSOFT, PAYPAL, GITHUB, OPENID_CONNECT, SAML, and PING_ONE. The default value of PING_ONE is set when a value for identityProvider.id is not provided. The PING_ONE value is the default for all pre-existing users. There is currently no search filter support for this attribute.
        lastSignOn:
          type: object
          properties:
            at:
              type: string
              description: The time of the last successful login of the user through the PingOne flow API.
            remoteIp:
              type: string
              description: The IP address of the last successful login of the user through the PingOne flow API.
        lifecycle:
          type: object
          properties:
            status:
              type: string
              description: A string that specifies information about the account lifecycle. Options for status are ACCOUNT_OK and VERIFICATION_REQUIRED. This property value is only allowed to be set when importing a user to set the initial account status. If the initial status is set to VERIFICATION_REQUIRED and an email address is provided, a verification email is sent.
        locale:
          type: string
          description: A string that specifies the user’s default location, which is optional. This may be explicitly set to null when updating a user to unset it. This is used for purposes of localizing such items as currency, date time format, or numerical representations. If provided, it must be a valid language tag as defined in RFC 5646. The following are example tags fr, en-US, es-419, az-Arab, man-Nkoo-GN. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
        memberOfGroupIDs:
          type: array
          readOnly: true
          description: A read-only array of IDs for the groups the user is a member of. This property is returned for GET /environments/{environmentID}/users/{userID} when include=memberOfGroupIDs is appended to the request. This property is not returned with a list of users.
          items:
            type: string
        memberOfGroupNames:
          type: array
          readOnly: true
          description: A read-only array of names for the groups the user is a member of. This property is returned for GET /environments/{environmentID}/users/{userID} when include=memberOfGroupNames is appended to the request. This property is not returned with a list of users.
          items:
            type: string
        mfaEnabled:
          type: boolean
          description: A boolean attribute that specifies whether multi-factor authentication is enabled. This attribute is set to false by default when the user is created. You can set mfaEnabled to true with POST CREATE User, POST CREATE User (Import), or PUT UPDATE User MFA Enabled. You cannot update mfaEnabled with PUT UPDATE User or PATCH UPDATE User.
        mobilePhone:
          type: string
          description: A string that specifies the user’s native phone number, which is optional. This might also match the primaryPhone attribute. This may be explicitly set to null when updating a user to unset it. Valid phone numbers must have at least one number and a maximum character length of 32.
        name:
          type: object
          properties:
            family:
              type: string
              description: A string that specifies the family name of the user, or Last in most Western languages (for example, ‘Jensen’ given the full name ‘Ms. Barbara J Jensen, III’). This may be explicitly set to null when updating a name to unset it. Valid characters consist of any Unicode letter, mark (for example, accent, umlaut), space, dot, apostrophe, or hyphen (regex ^[\p{L}\p{M}\p{N}' .-]*$). It can have a length of no more than 256 characters (min/max=1/256).
            formatted:
              type: string
              description: A string that specifies the fully formatted name of the user (for example ‘Ms. Barbara J Jensen, III’). This can be explicitly set to null when updating a name to unset it. Valid characters consist of any Unicode letter, mark (for example, accent, umlaut), space, dot, apostrophe, or hyphen (regex ^[\p{L}\p{M}\p{N}' .-]*$). It can have a length of no more than 256 characters (min/max=1/256).
            given:
              type: string
              description: A string that specifies the given name of the user, or First in most Western languages (for example, ‘Barbara’ given the full name ‘Ms. Barbara J Jensen, III’). This may be explicitly set to null when updating a name to unset it. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
            honorificPrefix:
              type: string
              description: A string that specifies the honorific prefix(es) of the user, or title in most Western languages (for example, ‘Ms.’ given the full name ‘Ms. Barbara Jane Jensen, III’). This can be explicitly set to null when updating a name to unset it.
            honorificSuffix:
              type: string
              description: A string that specifies the honorific suffix(es) of the user, or suffix in most Western languages (for example, ‘III’ given the full name ‘Ms. Barbara Jane Jensen, III’). This can be explicitly set to null when updating a name to unset it.
            middle:
              type: string
              description: A string that specifies the the middle name(s) of the user (for exmple, ‘Jane’ given the full name ‘Ms. Barbara Jane Jensen, III’). This can be explicitly set to null when updating a name to unset it. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
        nickname:
          type: string
          description: A string that specifies the user’s nickname, which is optional. This can be explicitly set to null when updating a user to unset it. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
        password:
          type: object
          description: An object that specifies the user's password. This property is never returned in the response.
          properties:
            forceChange:
              type: boolean
              description: (Optional) A boolean that specifies whether the user is forced to change the password on the next log in. If not provided, the property is set to false.
            value:
              type: string
              description: A string that specifies the user's password value. The string is either in cleartext or pre-encoded format.
            external:
              type: object
              description: (Optional) An object that maps the information relevant to the user’s password, and its association to external directories.
              properties:
                gateway:
                  type: object
                  description: (Optional) An object containing the gateway properties. When this is value is specified, the user’s password is managed in an external directory. You can set the user password using Create User (Import) or Update Password (Set).
                  properties:
                    id:
                      type: string
                      description: The UUID of the linked gateway that references the remote directory.
                    type:
                      type: string
                      description: An enum indicating one of the supported gateway types. For the supported types, see type in the Gateway base data model.
                    userType:
                      type: object
                      description: A reference to a userType in the list of userTypes values for an LDAP gateway.
                      properties:
                        id:
                          type: string
                          description: The UUID of a user type in the list of userTypes for the LDAP gateway.
                    correlationAttributes:
                      type: object
                      description: An object that maps the external LDAP directory attributes to PingOne attributes. We use the correlationAttributes values to read the attributes from the external LDAP directory and map them to the corresponding PingOne attributes.
        photo:
          type: object
          properties:
            href:
              type: string
              description: A string that specifies the URI that is a uniform resource locator (as defined in Section 1.1.3 of RFC 3986) that points to a resource location representing the user’s image. This can be removed from a user by setting the photo attribute to null. If provided, the resource must be a file (for example, a GIF, JPEG, or PNG image file) rather than a web page containing an image. It must be a valid URL that starts with the HTTP or HTTPS scheme.
        population:
          type: object
          properties:
            id:
              type: string
              description: A string that specifies the identifier of the population resource associated with the user. This property cannot be updated using PUT {{apiPath}}/environments/{{environmentID}}/users/{{userID}}. However, it can be updated using PUT /environments/{{environmentID}}/users/{{userID}}/population.
          required:
            - id
        preferredLanguage:
          type: string
          description: A string that specifies the user’s preferred written or spoken languages, which are optional. This may be explicitly set to null when updating a user to unset it. If provided, the format of the value must be a valid language range and the same as the HTTP Accept-Language header field (not including Accept-Language:) and is specified in Section 5.3.5 of RFC 7231. For example en-US, en-gb;q=0.8, en;q=0.7.
        primaryPhone:
          type: string
          description: A string that specifies the user’s primary phone number, which is optional. This might also match the mobilePhone attribute. This may be explicitly set to null when updating a user to unset it. Valid phone numbers must have at least one number and a maximum character length of 32.
        timezone:
          type: string
          description: A string that specifies the user’s time zone, which is optional. This can be explicitly set to null when updating a user to unset it. If provided, it must conform with the IANA Time Zone database format [RFC6557], also known as the “Olson” time zone database format [Olson-TZ] for example, “America/Los_Angeles” (regex ^\w+\/\w+$).
        title:
          type: string
          description: A string that specifies the user’s title, which is optional, such as "Vice President". This can be explicitly set to null when updating a user to unset it. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
        type:
          type: string
          description: A string that specifies the user’s type, which is optional. This can be explicitly set to null when updating a user to unset it. This attribute is organization-specific and has no special meaning within the PingOne platform. It could have values of "Contractor", "Employee", "Intern", "Temp", "External", and “Unknown”. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 256 characters (min/max=1/256).
        updatedAt:
          type: string
          description: The time the resource was last updated.
        username:
          type: string
          description: A string that specifies the user name, which must be provided and must be unique within an environment. The username must either be a well-formed email address or a string. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex ^[\p{L}\p{M}\p{Zs}\p{S}\p{N}\p{P}]*$). It can have a length of no more than 128 characters (min/max=1/128).
        verifyStatus:
          type: string
          enum: [NOT_INITIATED, ENABLED, DISABLED]
          description: Indicates whether ID verification can be done for the user. This value can be NOT_INITIATED (the initial value), ENABLED, or DISABLED. If the user verification status is DISABLED, a new verification status cannot be created for that user until the status is changed to ENABLED.
      required:
        - population
        - email
        - username
security:
  - bearer: []
tags:
  - name: Management APIs
  - name: Accounting for Latency
  - name: Active Identity Counts
  - name: Agreement Management
  - name: Agreement Management > Agreements Resources
  - name: Agreement Management > Agreement Languages Resources
  - name: Agreement Management > Agreement Revisions Resources
  - name: Alerting
  - name: Applications
  - name: Applications > Applications
  - name: Applications > Application Secret
  - name: Applications > Application Resource Grants
  - name: Applications > Application Sign-On Policy Assignments
  - name: Applications > Application Role Assignments
  - name: Applications > Application Attribute Mapping
  - name: Applications > Application MFA Push Credentials
  - name: Audit Activities
  - name: Authentications per Application
  - name: Bill of Materials (BOM)
  - name: Branding
  - name: Branding > Branding Settings
  - name: Branding > Branding Themes
  - name: Capabilities
  - name: Certificate Management
  - name: Custom Domains
  - name: Device Authentication Policy
  - name: Environments
  - name: Gateway Management
  - name: Gateway Management > Gateways
  - name: Gateway Management > Gateway Credentials
  - name: Gateway Management > Gateway Instances
  - name: Gateway Management > Gateway Role Assignments
  - name: Groups
  - name: Identity Propagation (Provisioning)
  - name: >-
      Identity Propagation (Provisioning) > Propagation
      Revisions
  - name: Identity Propagation (Provisioning) > Propagation Plans
  - name: Identity Propagation (Provisioning) > Propagation Stores
  - name: >-
      Identity Propagation (Provisioning) > Propagation Store
      Metadata
  - name: Identity Propagation (Provisioning) > Propagation Rules
  - name: >-
      Identity Propagation (Provisioning) > Propagation
      Mappings
  - name: Identity Provider Management
  - name: Identity Provider Management > Identity Providers
  - name: >-
      Identity Provider Management > Identity Provider
      Attributes
  - name: Images
  - name: Integration Catalog
  - name: Language Management
  - name: Language Management > Languages
  - name: Language Management > Language Localization Status
  - name: Licenses
  - name: Notifications
  - name: Notifications > Notifications Templates
  - name: Notifications > Notifications Settings
  - name: Notifications > Notifications Settings (SMTP)
  - name: Notifications > Phone Delivery Settings
  - name: Notifications > Trusted Email Domains
  - name: Notifications > Trusted Email Addresses
  - name: Organizations
  - name: Password Policies
  - name: Populations
  - name: Resources
  - name: Resources > Resources
  - name: Resources > Resource Scopes
  - name: Resources > Resource Attributes
  - name: Roles
  - name: Schemas
  - name: Sign-On Policies
  - name: Sign-On Policies > Sign-On Policies
  - name: Sign-On Policies > Sign-On Policy Actions
  - name: Subscriptions (webhooks)
  - name: Total Identities
  - name: User Activities
  - name: Users
  - name: Users > Users
  - name: Users > Group Membership
  - name: Users > Enable Users
  - name: Users > Linked Accounts
  - name: Users > User Populations
  - name: Users > User Passwords
  - name: Users > User Role Assignments
  - name: Users > User ID Verification
  - name: Users > User Agreement Consents
  - name: Users > User Accounts
  - name: Users > Sessions
paths:
  /v1/environments:
    get:
      tags:
        - Environments
      summary: READ All Environments
      operationId: readAllEnvironments
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Adding a paging value to limit the number of resources displayed per page
        - name: filter
          in: query
          schema:
            type: string
          description: Adding a SCIM filter for an environment to display only those resources associated with the specified environment. 'sw', 'eq' and 'and' are supported
          example: name sw "S" and license.id eq "34f0efac-21d9-4a17-8a35-196bb3362983"
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Environments
      summary: CREATE Environment (Active License)
      operationId: createEnvironmentActiveLicense
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
  /v1/environments/{environmentID}:
    get:
      tags:
        - Environments
      summary: READ One Environment
      operationId: readOneEnvironment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
    put:
      tags:
        - Environments
      summary: UPDATE Environment
      operationId: updateEnvironment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
    delete:
      tags:
        - Environments
      summary: DELETE Environment
      operationId: deleteEnvironment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/activeIdentityCounts:
    get:
      tags:
        - Active Identity Counts
      summary: READ Active Identity Counts (Deprecated)
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: startDate ge "2019-05-01T19:00:00Z" and samplingPeriod eq "10"
        - name: limit
          in: query
          schema:
            type: integer
          example: '10'
        - name: order
          in: query
          schema:
            type: string
          example: '-startDate'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/metrics/activeIdentityCounts:
    get:
      tags:
        - Active Identity Counts
      summary: READ Active Identity Counts by Date Range
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: startDate ge "2020-05-01T19:00:00Z"
        - name: limit
          in: query
          schema:
            type: integer
          example: '10'
        - name: order
          in: query
          schema:
            type: string
          example: '-startDate'
        - name: samplePeriod
          in: query
          schema:
            type: string
          example: MONTH
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/agreements:
    post:
      tags:
        - Agreement Management > Agreements Resources
      summary: CREATE Agreement
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Agreement_2
                description: Terms of service agreement
                reconsentPeriodDays: 180
                enabled: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Agreement Management > Agreements Resources
      summary: READ All Agreements
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/agreements/{agreementID}:
    get:
      tags:
        - Agreement Management > Agreements Resources
      summary: READ One Agreement
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Agreement Management > Agreements Resources
      summary: UPDATE Agreement
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Agreement_1_UPDATED_{{$timestamp}}
                reconsentPeriodDays: 360
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Agreement Management > Agreements Resources
      summary: DELETE Agreement
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/agreements/{agreementID}/languages:
    post:
      tags:
        - Agreement Management > Agreement Languages Resources
      summary: CREATE Language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                locale: en-US
                displayName: Language_1
                enabled: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Agreement Management > Agreement Languages Resources
      summary: READ All Languages
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}:
    get:
      tags:
        - Agreement Management > Agreement Languages Resources
      summary: READ One Language
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Agreement Management > Agreement Languages Resources
      summary: UPDATE Language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                locale: en-CH
                displayName: Language_{{$timestamp}}
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Agreement Management > Agreement Languages Resources
      summary: DELETE Language
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions:
    post:
      tags:
        - Agreement Management > Agreement Revisions Resources
      summary: CREATE Revision
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                effectiveAt: '2099-08-01T22:45:44.497Z'
                requireReconsent: false
                text: So, you agree to all my terms, right?
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Agreement Management > Agreement Revisions Resources
      summary: READ All Revisions
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}/revisions/{revisionID}:
    get:
      tags:
        - Agreement Management > Agreement Revisions Resources
      summary: READ One Revision
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
        - name: revisionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Agreement Management > Agreement Revisions Resources
      summary: DELETE Revision
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
        - name: revisionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/alertChannels:
    get:
      tags:
        - Alerting
      summary: READ All Alert Channels per Environment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Alerting
      summary: CREATE Alert Channel (Email)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                channelType: EMAIL
                includeSeverities:
                  - ERROR
                includeAlertTypes:
                  - CERTIFICATE_EXPIRED
                excludeAlertTypes: []
                addresses:
                  - tom@example.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/alertChannels/{alertChannelID}:
    put:
      tags:
        - Alerting
      summary: UPDATE Alert Channel
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                channelType: EMAIL
                includeSeverities:
                  - WARNING
                includeAlertTypes:
                  - CERTIFICATE_EXPIRED
                excludeAlertTypes: []
                addresses:
                  - tom@example.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: alertChannelID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Alerting
      summary: DELETE Alert Channel
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: alertChannelID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/applications:
    get:
      tags:
        - Applications > Applications
      summary: READ All Applications
      operationId: readAllApplications
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Applications > Applications
      summary: CREATE Application
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ApplicationSAML'
                - $ref: '#/components/schemas/ApplicationOIDC'
              example:
                name: app_{{$timestamp}}
                description: this is my application
                enabled: true
                '#loginPageUrl': https://example.com
                type: WEB_APP
                protocol: SAML
                '#icon':
                  id: 04ad537e-c9cd-45c3-abfb-f41946cfe374
                  href: >-
                    https://upload.wikimedia.org/wikipedia/commons/a/a8/Baby_Jake.jpg
                assertionDuration: 60
                acsUrls:
                  - https://example.com
                sloResponseEndpoint: https://example.com
                spEntityId: test
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApplicationSAML'
                  - $ref: '#/components/schemas/ApplicationOIDC'
  /v1/environments/{environmentID}/applications/{applicationID}:
    get:
      tags:
        - Applications > Applications
      summary: READ One Application
      operationId: readOneApplication
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApplicationSAML'
                  - $ref: '#/components/schemas/ApplicationOIDC'
    put:
      tags:
        - Applications > Applications
      summary: UPDATE Application
      operationId: updateApplication
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/ApplicationSAML'
                - $ref: '#/components/schemas/ApplicationOIDC'
              example:
                name: UPDATED_{{$timestamp}}
                description: this is my UPDATED client
                enabled: false
                type: WEB_APP
                protocol: SAML
                assertionDuration: 60
                acsUrls:
                  - https://example.com
                sloResponseEndpoint: https://example.com
                spEntityId: test
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApplicationSAML'
                  - $ref: '#/components/schemas/ApplicationOIDC'
    delete:
      tags:
        - Applications > Applications
      summary: DELETE Application
      operationId: deleteApplication
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/applications/{applicationID}/secret:
    get:
      tags:
        - Applications > Application Secret
      summary: READ Application Secret
      operationId: readApplicationSecret
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationSecret'
    post:
      tags:
        - Applications > Application Secret
      summary: UPDATE Application Secret
      operationId: updateApplicationSecret
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/applications/{applicationID}/grants:
    post:
      tags:
        - Applications > Application Resource Grants
      summary: CREATE Grant
      operationId: createApplicationGrant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationResourceGrant'
              example:
                resource:
                  id: '{{resourceID}}'
                scopes:
                  - id: '{{scopeID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResourceGrant'
    get:
      tags:
        - Applications > Application Resource Grants
      summary: READ All Grants for an Application
      operationId: readAllApplicationGrants
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
  /v1/environments/{environmentID}/applications/{applicationID}/grants/{grantID}:
    get:
      tags:
        - Applications > Application Resource Grants
      summary: READ One Grant for an Application
      operationId: readOneApplicationGrant
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: grantID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResourceGrant'
    put:
      tags:
        - Applications > Application Resource Grants
      summary: UPDATE Grant
      operationId: updateApplicationGrant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationResourceGrant'
              example:
                resource:
                  id: '{{resourceID}}'
                scopes:
                  - id: '{{OIDCscopeID}}'
                  - id: '{{anotherOIDCscopeID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: grantID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationResourceGrant'
    delete:
      tags:
        - Applications > Application Resource Grants
      summary: DELETE Grant
      operationId: deleteApplicationGrant
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: grantID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments:
    get:
      tags:
        - >-
          Applications > Application Sign-On Policy
          Assignments
      summary: READ All SOP Assignments
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Applications > Application Sign-On Policy
          Assignments
      summary: CREATE SOP Assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                priority: 1
                signOnPolicy:
                  id: '{{policyID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}:
    get:
      tags:
        - >-
          Applications > Application Sign-On Policy
          Assignments
      summary: READ One SOP Assignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: SOPAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - >-
          Applications > Application Sign-On Policy
          Assignments
      summary: UPDATE SOP Assignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                priority: 5
                signOnPolicy:
                  id: '{{policyID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: SOPAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - >-
          Applications > Application Sign-On Policy
          Assignments
      summary: DELETE SOP Assignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: SOPAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/applications/{applicationID}/roleAssignments:
    get:
      tags:
        - Applications > Application Role Assignments
      summary: READ Application Role Assignments
      operationId: readApplicationRoleAssignments
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Applications > Application Role Assignments
      summary: CREATE Application Role Assignments
      operationId: createApplicationRoleAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
              example:
                role:
                  id: '{{roleID}}'
                scope:
                  id: '{{environmentID}}'
                  type: ENVIRONMENT
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
  /v1/environments/{environmentID}/applications/{applicationID}/roleAssignments/{roleAssignmentID}:
    get:
      tags:
        - Applications > Application Role Assignments
      summary: READ One Application Role Assignment
      operationId: readOneApplicationRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: roleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
    delete:
      tags:
        - Applications > Application Role Assignments
      summary: DELETE Application Role Assignment
      operationId: deleteApplicationRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: roleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/applications/{applicationID}/attributes:
    get:
      tags:
        - Applications > Application Attribute Mapping
      summary: READ All Application Attribute Mappings
      operationId: readAllApplicationAttributeMappings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Applications > Application Attribute Mapping
      summary: CREATE Application Attribute Mapping
      operationId: createApplicationAttributeMapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationAttributeMapping'
              example:
                name: email
                value: ${user.email}
                required: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAttributeMapping'
  /v1/environments/{environmentID}/applications/{applicationID}/attributes/{attrMappingID}:
    get:
      tags:
        - Applications > Application Attribute Mapping
      summary: READ One Application Attribute Mapping
      operationId: readOneApplicationAttributeMapping
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: attrMappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAttributeMapping'
    put:
      tags:
        - Applications > Application Attribute Mapping
      summary: UPDATE Application Attribute Mapping
      operationId: updateApplicationAttributeMapping
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationAttributeMapping'
              example:
                name: email
                value: ${user.email}
                required: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: attrMappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationAttributeMapping'
    delete:
      tags:
        - Applications > Application Attribute Mapping
      summary: DELETE Application Attribute Mapping
      operationId: deleteApplicationAttributeMapping
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: applicationID
          in: path
          schema:
            type: string
          required: true
        - name: attrMappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/activities:
    get:
      tags:
        - Audit Activities
      summary: GET User Activities
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: >-
            recordedat gt "2018-08-20T00:00:00Z" AND recordedat lt
            "2018-08-22T23:59:00Z"
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Audit Activities
      summary: GET User Activities
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                filter: >-
                  recordedat gt "2019-01-01T22:54:12.988Z" AND recordedat lt
                  "2019-01-31T22:54:12.988Z" AND actors.user.name eq "Bill"
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/activities/{activityID}:
    get:
      tags:
        - Audit Activities
      summary: GET One User Activity
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: activityID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/applicationSignons:
    get:
      tags:
        - Authentications per Application
      summary: READ Authentications Per Application (Partial)
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          example: '1'
        - name: samplePeriod
          in: query
          schema:
            type: integer
          example: '1'
        - name: samplePeriodCount
          in: query
          schema:
            type: integer
          example: '100'
        - name: filter
          in: query
          schema:
            type: string
          example: occurredAt ge "2019-10-03T00:00:00Z""
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/billOfMaterials:
    get:
      tags:
        - Bill of Materials (BOM)
      summary: READ One Bill of Materials
      operationId: readOneBillOfMaterials
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillOfMaterials'
    put:
      tags:
        - Bill of Materials (BOM)
      summary: UPDATE Bill of Materials
      operationId: updateBillOfMaterials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillOfMaterials'
              example:
                products:
                  - type: PING_DIRECTORY
                    description: PingOne Directory
                  - type: PING_ONE_MFA
                    description: PingOne MFA
                  - type: PING_ONE_PROVISIONING
                    description: PingOne Provisioning
                  - type: PING_ONE_RISK
                    description: PingOne Risk
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillOfMaterials'
  /v1/environments/{environmentID}/brandingSettings:
    get:
      tags:
        - Branding > Branding Settings
      summary: READ Branding Settings
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Branding > Branding Settings
      summary: UPDATE Branding Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                companyName: Ping
                logo:
                  href: '{{imageURL}}'
                  id: '{{imageID}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/themes:
    get:
      tags:
        - Branding > Branding Themes
      summary: READ Branding Themes
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Branding > Branding Themes
      summary: CREATE Branding Theme
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                template: default
                configuration:
                  logoType: IMAGE
                  logo:
                    href: https://logo.com
                    id: '{{logoID}}'
                  backgroundColor: '#333333'
                  backgroundType: COLOR
                  backgroundImage:
                    href: https://bg.com
                    id: '{{imageID}}'
                  cardColor: '#333333'
                  headingTextColor: '#333333'
                  linkTextColor: '#333333'
                  bodyTextColor: '#444444'
                  buttonTextColor: '#333333'
                  buttonColor: '#333333'
                  name: ACME test theme
                  footer: some footer
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/themes/{themeID}:
    get:
      tags:
        - Branding > Branding Themes
      summary: READ One Branding Theme
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: themeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Branding > Branding Themes
      summary: UPDATE Branding Theme
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                template: default
                configuration:
                  logoType: IMAGE
                  logo:
                    href: https://logo.com
                    id: '{{logoID}}'
                  backgroundColor: '#333333'
                  backgroundType: COLOR
                  backgroundImage:
                    href: https://bg.com
                    id: '{{imageID}}'
                  cardColor: '#333333'
                  headingTextColor: '#333333'
                  linkTextColor: '#333333'
                  bodyTextColor: '#444444'
                  buttonTextColor: '#333333'
                  buttonColor: '#333333'
                  name: test theme
                  footer: Good for Copyright information.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: themeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Branding > Branding Themes
      summary: DELETE Branding Theme
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: themeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/themes/{themeID}/default:
    get:
      tags:
        - Branding > Branding Themes
      summary: READ Branding Theme Default
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: themeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Branding > Branding Themes
      summary: UPDATE Branding Theme Default
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                default: true
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{jwtToken}}'
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: themeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/capabilities:
    get:
      tags:
        - Capabilities
      summary: READ Environment Capabilities
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/keys:
    get:
      tags:
        - Certificate Management
      summary: GET Keys
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Certificate Management
      summary: CREATE Key with PKCS12 File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                usageType:
                  type: string
                  example: ENCRYPTION
                file:
                  type: string
                  format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-pkcs12-certificates
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/keys/{keyID}:
    get:
      tags:
        - Certificate Management
      summary: EXPORT Public Key (X509 PEM)
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-pkcs7-certificates
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Certificate Management
      summary: UPDATE Key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                default: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Certificate Management
      summary: DELETE Key
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/keys/{keyID}/applications:
    get:
      tags:
        - Certificate Management
      summary: GET Key Applications
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/certificates:
    get:
      tags:
        - Certificate Management
      summary: GET Certificates
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Certificate Management
      summary: CREATE Certificate with PKCS7 or PEM File
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                usageType:
                  type: string
                  example: SIGNING
                file:
                  type: string
                  format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-pkcs7-certificates
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/certificates/{certID}:
    get:
      tags:
        - Certificate Management
      summary: GET Certificate
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: certID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Certificate Management
      summary: DELETE Certificate
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: certID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/certificates/{certID}/applications:
    get:
      tags:
        - Certificate Management
      summary: GET Certificate Applications
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: certID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/encryptions:
    post:
      tags:
        - Certificate Management
      summary: ENCRYPT Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                key:
                  id: '{keyId}'
                certificate:
                  id: '{certificateId}'
                plainText: SGVsbG8sIFdvcmxkIQ==
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/decryptions:
    post:
      tags:
        - Certificate Management
      summary: DECRYPT Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                key:
                  id: 40e6c099-20dd-4763-be84-a5d9fd30f3ba
                cipherText: >-
                  0kEOngncmwvmGal0pT1y71bNsfWfvllmoDQlPfUq4UxiFE/u2w0RoS0yqPieNY1samW971zFuZ+XGtqIp69id6KSd9WXaaZliE18GAk8XvnilKF4A6TW1lmkpGuezI6G6AxPaaFVMKZyPx6R8Ai90aRBkcZ+2TtOrzZjGWh0Z132R/3syiFpEzBIqmo/ksnHKcojfj0Eq8cMwaSeymLaxT/wykeCwDC4x2QrRQLVmM4yCDNM2eC/3ArkB24pjMXHKfcr5jzR9ZtHdlh7Bs8D4JpdNMyD+uI6mrJyFll+E3TLGUhRymjMc4ZiUpPPntoXVzYq4xupZdNTbbcClA6hyg==
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/signings:
    post:
      tags:
        - Certificate Management
      summary: SIGN Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                algorithm: SHA256withRSA
                plainText: string
                key:
                  id: '{keyId}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/verifications:
    post:
      tags:
        - Certificate Management
      summary: VERIFY Signed Data
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                key:
                  id: '{keyId}'
                certificate:
                  id: '{certificateId}'
                plainText: SGVsbG8sIFdvcmxkIQ==
                signature: '{signature}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/keys/{keyID}/csr:
    get:
      tags:
        - Certificate Management
      summary: Export a certificate signing request (CSR)
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/pkcs10
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Certificate Management
      summary: Import Certificate Authority (CA) Response to a CSR
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/x-pem-file
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: keyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/customDomains:
    get:
      tags:
        - Custom Domains
      summary: READ All Domains
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Custom Domains
      summary: CREATE Domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                domainName: custom-domain.example.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/customDomains/{customDomainID}:
    get:
      tags:
        - Custom Domains
      summary: READ One Domain
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: customDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Custom Domains
      summary: Import Certificate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                certificate: |-
                  -----BEGIN CERTIFICATE-----
                  ...
                  -----END CERTIFICATE-----
                intermediateCertificates: |-
                  -----BEGIN CERTIFICATE-----
                  ...
                  -----END CERTIFICATE-----
                  -----BEGIN CERTIFICATE-----
                  ...
                  -----END CERTIFICATE-----
                privateKey: |-
                  -----BEGIN RSA PRIVATE KEY-----
                  ...
                  -----END RSA PRIVATE KEY-----
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.certificate.import+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: customDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Custom Domains
      summary: DELETE Domain
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: customDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/deviceAuthenticationPolicy:
    get:
      tags:
        - Device Authentication Policy
      summary: READ Device Authentication Policy
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/deviceAuthenticationPolicy/{deviceAuthPolicyID}:
    put:
      tags:
        - Device Authentication Policy
      summary: UPDATE Device Authentication Policy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Environment Policy
                sms:
                  enabled: true
                  otp:
                    failure:
                      count: 3
                      coolDown:
                        duration: 0
                        timeUnit: MINUTES
                    lifeTime:
                      duration: 30
                      timeUnit: MINUTES
                email:
                  enabled: true
                  otp:
                    failure:
                      count: 3
                      coolDown:
                        duration: 0
                        timeUnit: MINUTES
                    lifeTime:
                      duration: 30
                      timeUnit: MINUTES
                mobile:
                  enabled: true
                  otp:
                    failure:
                      count: 3
                      coolDown:
                        duration: 2
                        timeUnit: MINUTES
                    window:
                      stepSize:
                        duration: 30
                        timeUnit: SECONDS
                totp:
                  enabled: true
                  otp:
                    failure:
                      count: 3
                      coolDown:
                        duration: 2
                        timeUnit: MINUTES
                voice:
                  enabled: true
                  otp:
                    failure:
                      count: 3
                      coolDown:
                        duration: 0
                        timeUnit: MINUTES
                    lifeTime:
                      duration: 30
                      timeUnit: MINUTES
                securityKey:
                  enabled: true
                forSignOnPolicy: true
                platform:
                  enabled: true
                default: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: deviceAuthPolicyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/type:
    put:
      tags:
        - Environments
      summary: UPDATE Environment Type
      operationId: updateEnvironmentType
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [PRODUCTION, SANDBOX]
                  description: A string that specifies the type of environment to use. Options are PRODUCTION and SANDBOX.
              example:
                type: PRODUCTION
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
  /v1/environments/{environmentID}/gateways:
    get:
      tags:
        - Gateway Management > Gateways
      summary: READ All Gateways
      operationId: readAllGateways
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Gateway Management > Gateways
      summary: CREATE Gateway
      operationId: createGateway
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Gateway'
                - $ref: '#/components/schemas/GatewayLDAP'
              example:
                name: PING_FED-Gateway
                description: My PingFederate Gateway
                type: PING_FEDERATE
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Gateway'
                  - $ref: '#/components/schemas/GatewayLDAP'
  /v1/environments/{environmentID}/gateways/{gatewayID}:
    get:
      tags:
        - Gateway Management > Gateways
      summary: READ One Gateway
      operationId: readOneGateway
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Gateway'
                  - $ref: '#/components/schemas/GatewayLDAP'
    put:
      tags:
        - Gateway Management > Gateways
      summary: UPDATE Gateway
      operationId: updateGateway
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Gateway'
                - $ref: '#/components/schemas/GatewayLDAP'
              example:
                name: PING_FED-Gateway
                description: My PingFederate Gateway
                type: PING_FEDERATE
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Gateway'
                  - $ref: '#/components/schemas/GatewayLDAP'
    delete:
      tags:
        - Gateway Management > Gateways
      summary: DELETE Gateway
      operationId: deleteGateway
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/gateways/{gatewayID}/credentials:
    post:
      tags:
        - Gateway Management > Gateway Credentials
      summary: CREATE Gateway Credentials
      operationId: createGatewayCredential
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayCredential'
  /v1/environments/{environmentID}/gateways/{gatewayID}/credentials/{credentialID}:
    delete:
      tags:
        - Gateway Management > Gateway Credentials
      summary: DELETE Gateway Credentials
      operationId: deleteGatewayCredential
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
        - name: credentialID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/gateways/{gatewayID}/instances:
    get:
      tags:
        - Gateway Management > Gateway Instances
      summary: READ All Gateway Instances
      operationId: readAllGatewayInstances
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
  /v1/environments/{environmentID}/gateways/{gatewayID}/instances/{instanceID}:
    get:
      tags:
        - Gateway Management > Gateway Instances
      summary: READ One Gateway Instance
      operationId: readOneGatewayInstance
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
        - name: instanceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GatewayInstance'
  /v1/environments/{environmentID}/gateways/{gatewayID}/roleAssignments:
    get:
      tags:
        - Gateway Management > Gateway Role Assignments
      summary: READ Gateway Role Assignments
      operationId: readGatewayRoleAssignments
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Gateway Management > Gateway Role Assignments
      summary: CREATE Gateway Role Assignments
      operationId: createGatewayRoleAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
              example:
                role:
                  id: '{{envRoleID}}'
                scope:
                  id: '{{environmentID}}'
                  type: ENVIRONMENT
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
  /v1/environments/{environmentID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}:
    get:
      tags:
        - Gateway Management > Gateway Role Assignments
      summary: READ One Gateway Role Assignment
      operationId: readOneGatewayRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayRoleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
    put:
      tags:
        - Gateway Management > Gateway Role Assignments
      summary: UPDATE Gateway Role Assignments
      operationId: updateGatewayRoleAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                role:
                  id: '{{envRoleID}}'
                scope:
                  id: '{{environmentID}}'
                  type: ENVIRONMENT
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayRoleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
    delete:
      tags:
        - Gateway Management > Gateway Role Assignments
      summary: DELETE Gateway Role Assignment
      operationId: deleteGatewayRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayID
          in: path
          schema:
            type: string
          required: true
        - name: gatewayRoleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/groups:
    get:
      tags:
        - Groups
      summary: READ All Groups
      operationId: readAllGroups
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: name eq "Training"
        - name: limit
          in: query
          schema:
            type: integer
          example: '10'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Groups
      summary: CREATE Group
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
              example:
                name: Managers
                description: This is a test group
                customData:
                  groupOwner: Tom Jones
                  securityGroup: true
                userFilter: title eq "Manager"
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /v1/environments/{environmentID}/groups/{groupID}:
    get:
      tags:
        - Groups
      summary: READ One Group
      operationId: readOneGroup
      parameters:
        - name: include
          in: query
          schema:
            type: string
          example: totalMemberCounts
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
        - Groups
      summary: UPDATE Group
      operationId: updateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
              example:
                name: MyGroupName1
                description: This is a group for testing.
                externalId: cn=Some Group,ou=groups,dc=some,dc=active-directory,dc=domain
                customData:
                  groupOnwer: Bill Sample
                  securityGroup: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
        - Groups
      summary: DELETE Group
      operationId: deleteGroup
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/groups/{groupID}/memberOfGroups:
    get:
      tags:
        - Groups
      summary: READ Group Nesting
      operationId: readGroupNesting
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Groups
      summary: CREATE Group Nesting
      operationId: createGroupNesting
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupNesting'
              example:
                id: e1d6564e-bc8e-443c-ba01-70af86cf06e4
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /v1/environments/{environmentID}/groups/{groupID}/memberOfGroups/{nestedGroupID}:
    delete:
      tags:
        - Groups
      summary: DELETE Group Nesting
      operationId: deleteGroupNesting
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
        - name: nestedGroupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/propagation/revisions:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Revisions
      summary: CREATE Revision
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/revisions/id:latest:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Revisions
      summary: READ Latest Revision
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/revisions/{previousRevisionID}:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Revisions
      summary: READ Previous Revision
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: previousRevisionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/plans:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Plans
      summary: READ All Plans
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Plans
      summary: CREATE Plan
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Default Plan
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/plans/{planID}:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Plans
      summary: READ One Plan
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: planID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Plans
      summary: UPDATE Plan
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Test-Propagation-Plan
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: planID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Plans
      summary: DELETE Plan
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: planID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/propagation/stores:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: READ All Stores
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: CREATE Store (Aquera)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: Aquera
                name: AqueraTest
                configuration:
                  AUTHENTICATION_METHOD: None
                  USER_FILTER: username Eq "%s"
                  UNIQUE_USER_IDENTIFIER: userName
                  REMOVE_ACTION: Disable
                  CREATE_NEW_USERS: true
                  UPDATE_NEW_USERS: true
                  DISABLE_NEW_USERS: true
                  USERS_RESOURCE: /Users
                  SCIM_VERSION: '2.0'
                  SCIM_URL: https://example.com
                  AUTHORIZATION_TYPE: Basic
                  BASIC_AUTH_USER: basicUserName
                  BASIC_AUTH_PASSWORD: BasicPassword
                image:
                  href: >-
                    https://d1oekt4jpdthse.cloudfront.net/branding/market/cb933bfe-8282-405a-a780-0a19b97edc02.png
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/stores/{storeID}:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: READ One Store
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: storeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: UPDATE Store
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: scim
                name: scim
                description: Update a scim connection
                configuration:
                  AUTHENTICATION_METHOD: Basic Authentication
                  SCIM_URL: https://scim.url
                  USERS_RESOURCE: /users
                  SCIM_VERSION: '1.1'
                  AUTHORIZATION_TYPE: Basic
                  BASIC_AUTH_USER: basicUserName
                  BASIC_AUTH_PASSWORD: BasicPassword
                image:
                  href: >-
                    https://d1oekt4jpdthse.cloudfront.net/branding/market/cb933bfe-8282-405a-a780-0a19b97edc02.png
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: storeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: DELETE Store
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: storeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/propagation/stores/connection/status:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Stores
      summary: TEST Connection Configuration
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: scim
                name: scim
                configuration:
                  AUTHENTICATION_METHOD: Basic Authentication
                  SCIM_URL: https://scim.url
                  USERS_RESOURCE: /users
                  SCIM_VERSION: '1.1'
                  AUTHORIZATION_TYPE: Basic
                  BASIC_AUTH_USER: basicUserName
                  BASIC_AUTH_PASSWORD: BasicPassword
                image:
                  href: >-
                    https://d1oekt4jpdthse.cloudfront.net/branding/market/cb933bfe-8282-405a-a780-0a19b97edc02.png
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.connection.check+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/storeMetadata/scim:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Store Metadata
      summary: Identity Propagation Store Metadata (SCIM)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: scim
                configuration:
                  AUTHENTICATION_METHOD: Basic Authentication
                  USER_FILTER: username Eq "%s"
                  UNIQUE_USER_IDENTIFIER: userName
                  REMOVE_ACTION: Disable
                  USERS_RESOURCE: /user
                  SCIM_VERSION: '1.1'
                  SCIM_URL: SCIM URL
                  AUTHORIZATION_TYPE: Basic
                  BASIC_AUTH_USER: username
                  BASIC_AUTH_PASSWORD: password
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/storeMetadata/Salesforce:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Store Metadata
      summary: Identity Propagation Store Metadata (Salesforce)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: Saleforce
                configuration:
                  SALESFORCE_DOMAIN: mySalesforceDomain.salesforce.com
                  CLIENT_ID: salesforceClientID
                  CLIENT_SECRET: salesforceClientSecret
                  OAUTH_ACCESS_TOKEN: token
                  OAUTH_REFRESH_TOKEN: token
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/storeMetadata/SalesforceContacts:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Store Metadata
      summary: Identity Propagation Store Metadata (SalesforceContacts)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: SaleforceContacts
                configuration:
                  SALESFORCE_DOMAIN: my.salesforce.com
                  CLIENT_ID: yourClientID
                  CLIENT_SECRET: yourClientSecret
                  OAUTH_ACCESS_TOKEN: yourAccessToken
                  OAUTH_REFRESH_TOKEN: yourRefreshToken
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/storeMetadata/Aquera:
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Store Metadata
      summary: Identity Propagation Store Metadata (Aquera)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: Aquera
                configuration:
                  AUTHENTICATION_METHOD: Basic Authentication
                  USER_FILTER: username Eq "%s"
                  UNIQUE_USER_IDENTIFIER: userName
                  REMOVE_ACTION: Disable
                  USERS_RESOURCE: /user
                  SCIM_VERSION: '1.1'
                  SCIM_URL: SCIM URL
                  AUTHORIZATION_TYPE: Basic
                  BASIC_AUTH_USER: username
                  BASIC_AUTH_PASSWORD: password
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/rules:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: READ All Rules
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Authorization
          in: header
          schema:
            type: string
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: CREATE Rule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                plan:
                  id: 9d108dd7-a97e-41ae-98dc-dbe391f68cf0
                environment:
                  id: 38b56b78-eb38-4f7a-afcc-0a1c0f5acd32
                sourceStore:
                  id: 4722a0c4-6e67-4ef5-a8f8-9b275f00bc09
                targetStore:
                  id: a09e3c58-022f-4390-8d9f-d28e9c33537c
                populations:
                  - id: 1425fb3b-476e-4cbe-9ef4-e06a52b74ab8
                deprovision: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/rules/{ruleID}:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: READ One Rule
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: DELETE Rule
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/propagation/plans/{planID}/rules:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: READ One Plan's Rules
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: planID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/rules/{storeID}:
    put:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Rules
      summary: UPDATE Rule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                plan:
                  id: 9d108dd7-a97e-41ae-98dc-dbe391f68cf0
                name: updated rule
                environment:
                  id: 38b56b78-eb38-4f7a-afcc-0a1c0f5acd32
                sourceStore:
                  id: 4722a0c4-6e67-4ef5-a8f8-9b275f00bc09
                targetStore:
                  id: a09e3c58-022f-4390-8d9f-d28e9c33537c
                populations:
                  - id: 1425fb3b-476e-4cbe-9ef4-e06a52b74ab8
                deprovision: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: storeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/mappings/{mappingID}:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Mappings
      summary: READ One Mapping
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: mappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Mappings
      summary: UPDATE Mapping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                rule:
                  id: 8c9cc5b2-4171-4804-abd4-115a8948e453
                sourceAttribute: username
                targetAttribute: accountId
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: mappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/rules/{ruleID}/mappings:
    get:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Mappings
      summary: READ One Rule  Mapping
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Mappings
      summary: CREATE Rule Mapping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                sourceAttribute: accountId
                targetAttribute: userName
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: ruleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/propagation/mapping/{mappingID}:
    delete:
      tags:
        - >-
          Identity Propagation (Provisioning) > Propagation
          Mappings
      summary: DELETE Mapping
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: mappingID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/identityProviders:
    get:
      tags:
        - Identity Provider Management > Identity Providers
      summary: READ All Identity Providers
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Identity Provider Management > Identity Providers
      summary: Discover OpenID Provider Metadata
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                url: https://Identity_Provider_oidc_well_known_endpoint
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.openid-configuration.discover+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/identityProviders/{providerID}:
    get:
      tags:
        - Identity Provider Management > Identity Providers
      summary: READ One Identity Provider
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Identity Provider Management > Identity Providers
      summary: UPDATE Identity Provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                '#accountLinking':
                  filter: SCIM filter for matching to a User
                '#description': Custom ID Provider
                enabled: false
                icon:
                  id: 9765e2ec-f958-4a20-a178-3ba5f54d6477
                  href: >-
                    https://upload.wikimedia.org/wikipedia/commons/thumb/9/96/Oxygen-user-identity-female.svg/128px-Oxygen-user-identity-female.svg.png
                name: UPDATED_{{$timestamp}}
                type: FACEBOOK
                applicationID: FBID
                appSecret: FBSecret
                '#permissions':
                  - USER_AGE_RANGE
                  - USER_BIRTHDAY
                  - USER_GENDER
                  - EMAIL
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Identity Provider Management > Identity Providers
      summary: DELETE Identity Provider
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/identityProviders/{providerID}/attributes:
    get:
      tags:
        - >-
          Identity Provider Management > Identity Provider
          Attributes
      summary: READ All Identity Provider Attributes
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - >-
          Identity Provider Management > Identity Provider
          Attributes
      summary: CREATE Identity Provider Attribute (SAML)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: externalId
                value: ${providerAttributes.externalId}
                update: ALWAYS
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/identityProviders/{providerID}/attributes/{idpAttrID}:
    get:
      tags:
        - >-
          Identity Provider Management > Identity Provider
          Attributes
      summary: READ One Identity Provider Attribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
        - name: idpAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - >-
          Identity Provider Management > Identity Provider
          Attributes
      summary: UPDATE Identity Provider Attribute
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: name.given
                value: ${providerAttributes.first_name}
                update: EMPTY_ONLY
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
        - name: idpAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - >-
          Identity Provider Management > Identity Provider
          Attributes
      summary: DELETE Identity Provider Attribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: providerID
          in: path
          schema:
            type: string
          required: true
        - name: idpAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/images:
    post:
      tags:
        - Images
      summary: CREATE Image
      operationId: createImage
      requestBody:
        content:
          image/*:
            schema:
              type: string
              format: binary
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: image/jpeg
        - name: Content-Disposition
          in: header
          schema:
            type: string
          example: attachment; filename=name.jpg
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
  /v1/environments/{environmentID}/images/{imgID}:
    get:
      tags:
        - Images
      summary: READ Image
      operationId: readImage
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: imgID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
    delete:
      tags:
        - Images
      summary: DELETE Image
      operationId: deleteImage
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: imgID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/integrations:
    get:
      tags:
        - Integration Catalog
      summary: READ Integration Metadata
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/integrations/{integrationID}:
    get:
      tags:
        - Integration Catalog
      summary: READ One Integration Metadata
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: integrationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/integrations/{integrationID}/versions:
    get:
      tags:
        - Integration Catalog
      summary: READ Integration Version Metadata
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: integrationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/integrations/{integrationID}/versions/{integrationVersionID}:
    get:
      tags:
        - Integration Catalog
      summary: READ One Integration Version Metadata
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: integrationID
          in: path
          schema:
            type: string
          required: true
        - name: integrationVersionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/integrations/{integrationID}/versions/{integrationVersionID}/asset:
    get:
      tags:
        - Integration Catalog
      summary: READ Integration Version Asset Download
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: integrationID
          in: path
          schema:
            type: string
          required: true
        - name: integrationVersionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/languages:
    get:
      tags:
        - Language Management > Languages
      summary: READ Languages
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/languages/{languageID}:
    get:
      tags:
        - Language Management > Languages
      summary: READ One Language
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Language Management > Languages
      summary: 'UPDATE Language '
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                enabled: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Language Management > Languages
      summary: DELETE Language
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/languages/:
    post:
      tags:
        - Language Management > Languages
      summary: CREATE Language
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                locale: fr
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/languages/{languageID}/status:
    get:
      tags:
        - Language Management > Language Localization Status
      summary: READ Language Localization Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Language Management > Language Localization Status
      summary: CREATE Language Localization Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service: Service_Name2
                localizationComplete: true
                statusDetails: Status details here
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/languages/{languageID}/status/{l10nStatusID}:
    get:
      tags:
        - Language Management > Language Localization Status
      summary: READ One Language Localization Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
        - name: l10nStatusID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Language Management > Language Localization Status
      summary: CREATE Language Localization Status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                service: Service_Name1
                localizationComplete: true
                statusDetails: Status Details - add updated status details here
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
        - name: l10nStatusID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Language Management > Language Localization Status
      summary: DELETE Language Localization Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: languageID
          in: path
          schema:
            type: string
          required: true
        - name: l10nStatusID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/templates:
    get:
      tags:
        - Notifications > Notifications Templates
      summary: READ All Templates
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/templates/{templateName}:
    get:
      tags:
        - Notifications > Notifications Templates
      summary: READ One Template
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/templates/{templateName}/contents:
    get:
      tags:
        - Notifications > Notifications Templates
      summary: READ All Contents
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Notifications > Notifications Templates
      summary: CREATE Push Content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                locale: en
                title: Test
                variant: variant_C
                body: ' Your OTP is ${otp}'
                deliveryMethod: Push
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Notifications > Notifications Templates
      summary: PATCH Bulk Variant Contents
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                variant: variant_D
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: variant eq {{variantName}}
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Notifications Templates
      summary: DELETE Bulk Variant Contents
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: variant eq {{variantName}}
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/templates/{templateName}/contents/{contentID}:
    get:
      tags:
        - Notifications > Notifications Templates
      summary: READ One Content
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
        - name: contentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Notifications > Notifications Templates
      summary: UPDATE Push Content
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                locale: en-gb
                title: Push Message
                body: ${user.username}, you have a new authentication request.
                deliveryMethod: Push
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
        - name: contentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Notifications Templates
      summary: DELETE Content
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: templateName
          in: path
          schema:
            type: string
          required: true
        - name: contentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/notificationsSettings:
    get:
      tags:
        - Notifications > Notifications Settings
      summary: READ Notifications Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Notifications > Notifications Settings
      summary: UPDATE Notifications Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Notifications Settings
      summary: DELETE Notifications Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/notificationsSettings/emailDeliverySettings:
    get:
      tags:
        - Notifications > Notifications Settings (SMTP)
      summary: READ Notifications Settings (SMTP)
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Notifications > Notifications Settings (SMTP)
      summary: UPDATE Notifications Settings (SMTP)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                host: email-smtp.server.com
                port: 465
                username: smtp_username
                password: smtp_password
                from:
                  name: from_name
                  address: from@pingidentity.com
                replyTo:
                  name: reply_name
                  address: reply@pingidentity.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Phone Delivery Settings
      summary: DELETE Phone Delivery Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/notificationsSettings/phoneDeliverySettings:
    get:
      tags:
        - Notifications > Phone Delivery Settings
      summary: READ All Phone Delivery Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Notifications > Phone Delivery Settings
      summary: CREATE Phone Delivery Settings (Syniverse)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                authToken: exampleAuthToken
                provider: CUSTOM_SYNIVERSE
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/notificationsSettings/phoneDeliverySettings/{phoneDeliverySettingsId}:
    get:
      tags:
        - Notifications > Phone Delivery Settings
      summary: READ One Phone Delivery Settings
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: phoneDeliverySettingsId
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Notifications > Phone Delivery Settings
      summary: UPDATE Phone Delivery Settings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: someTwilioPhoneDeliverySettingsId
                sid: someSid
                provider: CUSTOM_TWILIO
                numbers:
                  - type: SHORT_CODE
                    capabilities:
                      - SMS
                    selected: true
                    available: true
                    number: '894546'
                  - type: SHORT_CODE
                    capabilities:
                      - SMS
                    selected: false
                    available: true
                    number: '894545'
                  - type: TOLL_FREE
                    capabilities:
                      - SMS
                    selected: true
                    available: true
                    number: '+18544440099'
                  - type: TOLL_FREE
                    capabilities:
                      - SMS
                    selected: false
                    available: true
                    number: '+18544440098'
                  - type: PHONE_NUMBER
                    capabilities:
                      - SMS
                      - VOICE
                    selected: true
                    available: true
                    number: '+172544440091'
                  - type: PHONE_NUMBER
                    capabilities:
                      - SMS
                      - VOICE
                    selected: true
                    available: true
                    number: '+972544440099'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: phoneDeliverySettingsId
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/emailDomains:
    get:
      tags:
        - Notifications > Trusted Email Domains
      summary: READ All Trusted Email Domains
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Notifications > Trusted Email Domains
      summary: CREATE Trusted Email Domain
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                domainName: auth.shopco.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}:
    get:
      tags:
        - Notifications > Trusted Email Domains
      summary: READ One Trusted Email Domain
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Trusted Email Domains
      summary: DELETE Trusted Email Domain
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}/ownership:
    get:
      tags:
        - Notifications > Trusted Email Domains
      summary: READ Trusted Email Domain Ownership Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}/dkim:
    get:
      tags:
        - Notifications > Trusted Email Domains
      summary: READ Trusted Email Domain DKIM Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}/spf:
    get:
      tags:
        - Notifications > Trusted Email Domains
      summary: READ Trusted Email Domain SPF Status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails/{trustedEmailId}:
    get:
      tags:
        - Notifications > Trusted Email Addresses
      summary: READ One Trusted Email Address
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
        - name: trustedEmailId
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Notifications > Trusted Email Addresses
      summary: Resend Verification Code To Email
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.trustedEmail.sendVerificationCode+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
        - name: trustedEmailId
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Notifications > Trusted Email Addresses
      summary: DELETE Trusted Email Address
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
        - name: trustedEmailId
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails:
    get:
      tags:
        - Notifications > Trusted Email Addresses
      summary: READ All Trusted Email Addresses
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Notifications > Trusted Email Addresses
      summary: CREATE Trusted Email Address
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                emailAddress: noreply1@auth.shopco.com
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: emailDomainID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/passwordPolicies:
    get:
      tags:
        - Password Policies
      summary: READ All Password Policies
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/passwordPolicies/{passwordPolicyID}:
    get:
      tags:
        - Password Policies
      summary: READ One Password Policy
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: passwordPolicyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Password Policies
      summary: UPDATE Password Policy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: 6e4b6b42-b73f-4d03-adbf-7bd231c8b23d
                environment:
                  id: 6e4b6b42-b73f-4d03-9871-24e7b26a290e
                name: Basic
                description: >-
                  A relaxed standard policy to allow for maximum customer
                  flexibility.
                excludesProfileData: false
                notSimilarToCurrent: false
                excludesCommonlyUsed: true
                lockout:
                  failureCount: 8
                  durationSeconds: 900
                length:
                  min: 8
                  max: 255
                minCharacters:
                  abcdefghijklmnopqrstuvwxyz: 1
                  ABCDEFGHIJKLMNOPQRSTUVWXYZ: 1
                  '0123456789': 1
                  ~!@#$%^&*()-_=+[]{}|;:,.<>/?: 1
                default: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: passwordPolicyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/populations:
    get:
      tags:
        - Populations
      summary: READ All Populations
      operationId: readAllPopulations
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: limit
          in: query
          schema:
            type: integer
          description: Adding a paging value to limit the number of resources displayed per page
        - name: filter
          in: query
          schema:
            type: string
          description: Adding a SCIM filter for a population ID or population name to display only those resources associated with the specified population. Only the id and name parameters are supported
          example: id eq "60971d3b-cc5a-4601-9c44-2be541f91bf1"
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: 
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Populations
      summary: CREATE Population
      operationId: createPopulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Population'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Population'
  /v1/environments/{environmentID}/populations/{popID}:
    get:
      tags:
        - Populations
      summary: READ One Population
      operationId: readOnePopulation
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: popID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Population'
    put:
      tags:
        - Populations
      summary: UPDATE Population
      operationId: updatePopulation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Population'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: popID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Population'
    delete:
      tags:
        - Populations
      summary: DELETE Population
      operationId: deletePopulation
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: popID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/resources:
    get:
      tags:
        - Resources > Resources
      summary: READ All Resources
      operationId: readAllResources
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Resources > Resources
      summary: CREATE Resource
      operationId: createResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
              example:
                name: CustomResource1
                description: This is my custom resource
                audience: https://api.custom.com
                accessTokenValiditySeconds: 7200
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
  /v1/environments/{environmentID}/resources/{resourceID}:
    get:
      tags:
        - Resources > Resources
      summary: READ One Resource
      operationId: readOneResource
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    put:
      tags:
        - Resources > Resources
      summary: UPDATE Resource
      operationId: updateResource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
              example:
                name: CustomResource_EU
                audience: https://api.custom.eu
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    delete:
      tags:
        - Resources > Resources
      summary: DELETE Resource
      operationId: deleteResource
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/resources/{resourceID}/scopes:
    get:
      tags:
        - Resources > Resource Scopes
      summary: READ All Scopes (Resource)
      operationId: readAllResourceScopes
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Resources > Resource Scopes
      summary: CREATE PingOne access control scope
      operationId: createResourceScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceScope'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceScope'
  /v1/environments/{environmentID}/resources/{resourceID}/scopes/{scopeID}:
    get:
      tags:
        - Resources > Resource Scopes
      summary: READ One Scope
      operationId: readOneResourceScope
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: scopeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceScope'
    put:
      tags:
        - Resources > Resource Scopes
      summary: UPDATE PingOne access control scope
      operationId: updateResourceScope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceScope'
              example:
                name: p1:update:user
                description: >-
                  An UPDATED access control scope that includes only the user
                  schema attributes listed in the schemaAttributes property
                schemaAttributes:
                  - name.family
                  - name.given
                  - email
                  - address.streetAddress
                  - address.locality
                  - address.region
                  - address.postalCode
                  - address.countryCode
                  - primaryPhone
                  - mobilePhone
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: scopeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceScope'
    delete:
      tags:
        - Resources > Resource Scopes
      summary: DELETE Scope
      operationId: deleteResourceScope
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: scopeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/resources/{resourceID}/attributes:
    get:
      tags:
        - Resources > Resource Attributes
      summary: READ All Resource Attributes
      operationId: readAllResourceAttributes
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Resources > Resource Attributes
      summary: CREATE Resource Attribute
      operationId: createResourceAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAttribute'
              example:
                name: firstName
                value: ${user.name.given}
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAttribute'
  /v1/environments/{environmentID}/resources/{resourceID}/attributes/{resourceAttrID}:
    get:
      tags:
        - Resources > Resource Attributes
      summary: READ One Resource Attribute
      operationId: readOneResourceAttribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: resourceAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAttribute'
    put:
      tags:
        - Resources > Resource Attributes
      summary: UPDATE Resource Attribute
      operationId: updateResourceAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceAttribute'
              example:
                name: nickname
                value: ${user.nickname}
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: resourceAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceAttribute'
    delete:
      tags:
        - Resources > Resource Attributes
      summary: DELETE Resource Attribute
      operationId: deleteResourceAttribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: resourceID
          in: path
          schema:
            type: string
          required: true
        - name: resourceAttrID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/schemas:
    get:
      tags:
        - Schemas
      summary: READ All Schemas
      operationId: readAllSchemas
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
  /v1/environments/{environmentID}/schemas/{schemaID}:
    get:
      tags:
        - Schemas
      summary: READ One Schema
      operationId: readOneSchema
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schema'
  /v1/environments/{environmentID}/schemas/{schemaID}/attributes:
    get:
      tags:
        - Schemas
      summary: READ All (Schema) Attributes
      operationId: readAllSchemaAttributes
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Schemas
      summary: CREATE Attribute
      operationId: createAttribute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaAttribute'
              example:
                description: >-
                  An optional property that specifies the description of the new
                  attribute.
                displayName: >-
                  An optional property that specifies the display name of the
                  attribute.
                enabled: false
                name: customAttribute-101
                required: false
                type: STRING
                unique: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAttribute'
  /v1/environments/{environmentID}/schemas/{schemaID}/attributes/{attributeID}:
    get:
      tags:
        - Schemas
      summary: READ One Attribute
      operationId: readOneAttribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
        - name: attributeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAttribute'
    patch:
      tags:
        - Schemas
      summary: UPDATE Attribute (Patch)
      operationId: updateAttributePatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaAttribute'
              example:
                name: NewName
                schemaType: CORE
                type: STRING
                unique: true
                enabled: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
        - name: attributeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAttribute'
    put:
      tags:
        - Schemas
      summary: UPDATE Attribute (Put)
      operationId: updateAttributePut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaAttribute'
              example:
                name: customAttribute
                unique: true
                enabled: false
                required: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
        - name: attributeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaAttribute'
    delete:
      tags:
        - Schemas
      summary: DELETE Attribute
      operationId: deleteAttribute
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: schemaID
          in: path
          schema:
            type: string
          required: true
        - name: attributeID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/signOnPolicies:
    get:
      tags:
        - Sign-On Policies > Sign-On Policies
      summary: READ All Sign On Policies
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Sign-On Policies > Sign-On Policies
      summary: CREATE Sign On Policy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Simple_Login
                default: 'false'
                description: A new basic sign-on policy.
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/signOnPolicies/{policyID}:
    get:
      tags:
        - Sign-On Policies > Sign-On Policies
      summary: READ One Sign On Policy
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Sign-On Policies > Sign-On Policies
      summary: UPDATE Sign On Policy
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Updated_Policy
                description: a sign-on policy that has been updated
                default: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Sign-On Policies > Sign-On Policies
      summary: DELETE Sign On Policy
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/signOnPolicies/{policyID}/actions:
    get:
      tags:
        - Sign-On Policies > Sign-On Policy Actions
      summary: READ All Sign-On Policy Actions
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Sign-On Policies > Sign-On Policy Actions
      summary: CREATE Sign-On Policy Action (AGREEMENT)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                priority: 50
                agreement:
                  id: '{{agreementID}}'
                type: AGREEMENT
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/signOnPolicies/{policyID}/actions/{actionID}:
    get:
      tags:
        - Sign-On Policies > Sign-On Policy Actions
      summary: READ One Sign-On Policy Action
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
        - name: actionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Sign-On Policies > Sign-On Policy Actions
      summary: UPDATE Sign-On Policy Action
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                priority: 2
                condition:
                  or:
                    - not:
                        ipRange:
                          - 10.5.3.72/24
                        contains: ${flow.request.http.remoteIp}
                    - secondsSince: ${session.lastSignOn.withAuthenticator.pwd.at}
                      greater: 50400
                    - value: ${user.population.id}
                      equals: 3985fb03-df09-4b00-a01f-89fd529c9de2
                    - value: ${user.email}
                      equals: joe@pingidentity.com
                    - ipRisk:
                        minScore: 80
                        maxScore: 100
                      valid: ${flow.request.http.remoteIp}
                    - geoVelocity: ${flow.request.http.remoteIp}
                      valid:
                        previousSuccessfulAuthenticationTime: ${user.lastSignOn.at}
                        previousSuccessfulAuthenticationIp: ${user.lastSignOn.remoteIp}
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
        - name: actionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Sign-On Policies > Sign-On Policy Actions
      summary: DELETE Sign-On Policy Action
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: policyID
          in: path
          schema:
            type: string
          required: true
        - name: actionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/subscriptions:
    post:
      tags:
        - Subscriptions (webhooks)
      summary: CREATE Subscriptions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: SubscriptionName1
                filterOptions:
                  includedActionTypes:
                    - USER.CREATED
                    - USER.UPDATED
                  includedPopulations:
                    - id: '{{popID}}'
                  includedApplications:
                    - id: '{{applicationID}}'
                httpEndpoint:
                  url: https://subscriptionendpoint.com
                  headers:
                    some-header: some-value
                format: ACTIVITY
                verifyTlsCertificates: false
                enabled: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Subscriptions (webhooks)
      summary: READ All Subscriptions
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/subscriptions/{subscriptionID}:
    get:
      tags:
        - Subscriptions (webhooks)
      summary: READ One Subscription
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: subscriptionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Subscriptions (webhooks)
      summary: UPDATE Subscription
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: UpdatedSubscription
                filterOptions:
                  includedActionTypes:
                    - USER.CREATED
                    - USER.MODIFIED
                  includedPopulations:
                    - id: '{popID}'
                  includedApplications:
                    - id: '{applicationID}'
                httpEndpoint:
                  url: https://subscriptionendpoint.com
                  headers:
                    some-header: some-value
                format: ACTIVITY
                enabled: true
                verifyTlsCertificates: true
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: subscriptionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Subscriptions (webhooks)
      summary: DELETE Subscription
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: subscriptionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/totalIdentities:
    get:
      tags:
        - Total Identities
      summary: READ Total Identity Counts
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: >-
            startDate eq "2019-05-01T19:00:00Z" and endDate eq
            "2019-05-31T19:00:00Z"
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/userActivities:
    get:
      tags:
        - User Activities
      summary: READ User Activities
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: >-
            startDate eq "2018-02-17T09:10:12-04:00" and endDate eq
            "2018-02-23T09:10:12-04:00"
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users:
    get:
      tags:
        - Users > Users
      summary: READ All Users
      operationId: readAllUsers
      parameters:
        - name: filter
          in: query
          schema:
            type: string
          example: memberOfGroups[id eq "{{groupID}}"] and name.family eq "demo"
        - name: limit
          in: query
          schema:
            type: integer
          example: '100'
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Users > Users
      summary: CREATE User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              example:
                email: do-not-send@example.com
                name:
                  given: Test
                  family: User
                population:
                  id: '{{popID}}'
                username: import-user_{{$timestamp}}
                password:
                  value: <This can be plain text or an acceptable hashed value.>
                  forceChange: false
      parameters:
        - name: content-type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.user.import+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /v1/environments/{environmentID}/users/{userID}:
    get:
      tags:
        - Users > Users
      summary: READ User
      operationId: readUser
      parameters:
        - name: include
          in: query
          schema:
            type: string
            enum: [memberOfGroupIDs, memberOfGroupNames]
          example: memberOfGroupIDs
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    post:
      tags:
        - Users > User Accounts
      summary: User Account Unlock
      parameters:
        - name: content-type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.account.unlock+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    put:
      tags:
        - Users > Users
      summary: UPDATE User (Put)
      operationId: updateUserPut
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              example:
                username: joe@example.com
                name:
                  formatted: Joe Smith
                  given: Joe
                  middle: H.
                  family: Smith
                  honorificPrefix: Dr.
                  honorificSuffix: IV
                nickname: Putty
                title: Senior Director
                preferredLanguage: en-gb;q=0.8, en;q=0.7
                locale: en-gb
                email: joe@example.com
                primaryPhone: '+1.2225554444'
                mobilePhone: '+1.4445552222'
                photo:
                  href: <url-to-image>
                address:
                  streetAddress: 123 Main Street
                  locality: Springfield
                  region: WA
                  postalCode: '98701'
                  countryCode: US
                accountId: '5'
                type: tele
                timezone: America/Los_Angeles
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      tags:
        - Users > Users
      summary: UPDATE User (Patch)
      operationId: updateUserPatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
              example:
                title: Manager
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - Users > Users
      summary: DELETE User
      operationId: deleteUser
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/users/{userID}/identityProvider:
    get:
      tags:
        - Users > Users
      summary: READ User Identity Provider
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > Users
      summary: UPDATE User Identity Provider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                identityProvider:
                  id: '{{idpID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/verifyStatus:
    get:
      tags:
        - Users > Users
      summary: READ user verification status
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > Users
      summary: UPDATE user verification status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                verifyStatus: ENABLED
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/memberOfGroups:
    post:
      tags:
        - Users > Group Membership
      summary: ADD User to Group
      operationId: addUserToGroup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: The group ID to add the user to
              example:
                id: e947cec5-62c5-4d80-af16-497b29e8a685
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    get:
      tags:
        - Users > Group Membership
      summary: READ All Group Memberships for User
      operationId: readAllGroupMembershipsForUser
      parameters:
        - name: expand
          in: query
          schema:
            type: string
          example: group
        - name: limit
          in: query
          schema:
            type: integer
          example: '100'
        - name: filter
          in: query
          schema:
            type: string
          example: type eq "DIRECT"
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
  /v1/environments/{environmentID}/users/{userID}/memberOfGroups/{groupID}:
    delete:
      tags:
        - Users > Group Membership
      summary: REMOVE User from Group
      operationId: removeUserFromGroup
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
    get:
      tags:
        - Users > Group Membership
      summary: READ One Group Membership for User
      operationId: readOneGroupMembershipForUser
      parameters:
        - name: expand
          in: query
          schema:
            type: string
          example: group
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: groupID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /v1/environments/{environmentID}/users/{userID}/enabled:
    get:
      tags:
        - Users > Enable Users
      summary: READ User Enabled
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > Enable Users
      summary: UPDATE User Enabled
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                enabled: false
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/linkedAccounts:
    get:
      tags:
        - Users > Linked Accounts
      summary: READ Linked Accounts
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/linkedAccounts/{linkedAccountID}:
    get:
      tags:
        - Users > Linked Accounts
      summary: READ One Linked Account
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: linkedAccountID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Users > Linked Accounts
      summary: DELETE Linked Account
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: linkedAccountID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/users/{userID}/pairingKeys/{pairingKeyID}:
    get:
      tags:
        - Users > MFA Pairing Keys
      summary: READ One MFA Pairing Key
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: pairingKeyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Users > MFA Pairing Keys
      summary: DELETE MFA Pairing Key
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: pairingKeyID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/users/{userID}/pairingKeys:
    post:
      tags:
        - Users > MFA Pairing Keys
      summary: CREATE MFA Pairing Key
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                applications:
                  - id: '{{applicationID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/population:
    get:
      tags:
        - Users > User Populations
      summary: READ User Population
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > User Populations
      summary: UPDATE User Population
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                id: '{{popID}}'
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/password:
    get:
      tags:
        - Users > User Passwords
      summary: READ Password State
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Users > User Passwords
      summary: Password Locked Out
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                recoveryCode: <code>
                newPassword: VerySecure123!
      parameters:
        - name: content-type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.password.recover+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > User Passwords
      summary: UPDATE Password (Set)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                value: >-
                  {SSHA512}UkGWfORubNKFpFBWh+Lgy4FrciclzUXneuryV+B+zBDR4Gqd5wvMqAvKRixgQWoZlZUgq8Wh40uMK3s6bWpzWt1/TqQH02hX
                forceChange: true
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.password.set+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/roleAssignments:
    get:
      tags:
        - Users > User Role Assignments
      summary: READ Role Assignments
      operationId: readUserRoleAssignments
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
    post:
      tags:
        - Users > User Role Assignments
      summary: CREATE User Role Assignment
      operationId: createUserRoleAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
              example:
                role:
                  id: '{{roleID}}'
                scope:
                  id: '{{environmentID}}'
                  type: ENVIRONMENT
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
  /v1/environments/{environmentID}/users/{userID}/roleAssignments/{roleAssignmentID}:
    get:
      tags:
        - Users > User Role Assignments
      summary: READ One Role Assignment
      operationId: readOneUserRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: roleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAssignment'
    delete:
      tags:
        - Users > User Role Assignments
      summary: DELETE User's Role Assignment
      operationId: deleteUserRoleAssignment
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: roleAssignmentID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/users/{userID}/verifyTransactions:
    get:
      tags:
        - Users > User ID Verification
      summary: READ All ID Verification Transaction Records for a User
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Users > User ID Verification
      summary: CREATE ID Verification Transaction Record for a User
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '201':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/verifyTransactions/{transactionID}:
    get:
      tags:
        - Users > User ID Verification
      summary: READ ID Verification Transaction Record for a User
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: transactionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Users > User ID Verification
      summary: UPDATE ID Verification Transaction Record for a User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                transactionStatus:
                  status: APPROVED_NO_REQUEST
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: transactionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Users > User ID Verification
      summary: DELETE ID Verification Transaction Record for a User
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: transactionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/environments/{environmentID}/users/{userID}/agreementConsents:
    get:
      tags:
        - Users > User Agreement Consents
      summary: READ All User Agreement Consents
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/agreementConsents/{agreementID}:
    get:
      tags:
        - Users > User Agreement Consents
      summary: READ One User Agreement Consent
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Users > User Agreement Consents
      summary: Revoke Agreement
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/vnd.pingidentity.consent.revoke+json
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: agreementID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/sessions:
    get:
      tags:
        - Users > Sessions
      summary: READ All Sessions
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/environments/{environmentID}/users/{userID}/sessions/{sessionID}:
    get:
      tags:
        - Users > Sessions
      summary: READ One Session
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: sessionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Users > Sessions
      summary: DELETE Session
      parameters:
        - name: environmentID
          in: path
          schema:
            type: string
          required: true
        - name: userID
          in: path
          schema:
            type: string
          required: true
        - name: sessionID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '204':
          description: Successful response
  /v1/organizations:
    get:
      tags:
        - Organizations
      summary: READ All Organizations
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}:
    get:
      tags:
        - Organizations
      summary: READ One Organization
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}/capabilities:
    get:
      tags:
        - Capabilities
      summary: READ Organization Capabilities
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}/licenses:
    get:
      tags:
        - Licenses
      summary: READ All Licenses
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}/licenses/{licenseID}:
    get:
      tags:
        - Licenses
      summary: READ One License
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
        - name: licenseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}/licenses/{licenseID}/name:
    get:
      tags:
        - Licenses
      summary: READ One License Name
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
        - name: licenseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Licenses
      summary: Update One License Name
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: Internal Test License
      parameters:
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
        - name: licenseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/organizations/{organizationID}/licenses/{licenseID}/metrics/activeIdentityCounts:
    get:
      tags:
        - Active Identity Counts
      summary: READ Active Identity Counts by License
      parameters:
        - name: aggregatedBy
          in: query
          schema:
            type: string
          example: calendarMonth
        - name: limit
          in: query
          schema:
            type: integer
          example: '20'
        - name: order
          in: query
          schema:
            type: string
          example: '-startDate'
        - name: organizationID
          in: path
          schema:
            type: string
          required: true
        - name: licenseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/roles:
    get:
      tags:
        - Roles
      summary: READ All Roles
      operationId: readAllRoles
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityArray'
  /v1/roles/{roleID}:
    get:
      tags:
        - Roles
      summary: READ One Role
      operationId: readOneRole
      parameters:
        - name: roleID
          in: path
          schema:
            type: string
          required: true
      responses:
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P1Error'
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
